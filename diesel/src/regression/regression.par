Q = {1,2,3,4,5,6,7,8,9,10};

0:[
  dynamic float64 workerAlpha;
  dynamic float64 workerBeta;
  precise int workerSamples;

  dynamic float64 alpha;
  dynamic float64 beta;
  precise int totalSamples;

  precise float64 tempF;
  dynamic float64 tempDF;

  totalSamples = 0;
  alpha = 0.0;
  beta  = 0.0;

  for q in Q do {
    workerAlpha = receive(q, dynamic float64);
    workerBeta  = receive(q, dynamic float64);
    workerSamples = receive(q, precise int);
    tempF = convertToFloat(workerSamples);
    tempDF = workerAlpha*tempF;
    alpha = alpha+tempDF;
    tempDF = workerBeta*tempF;
    beta  = beta+tempDF;
    totalSamples = totalSamples + workerSamples;
  };

  tempF = convertToFloat(totalSamples);
  alpha = alpha/tempF;
  beta  = beta /tempF;
  ## check(alpha, 0.99, 0.01);
  ## check(beta , 0.99, 0.01);
  Alpha = alpha;
  Beta = beta;
] ||
q in Q:[
  dynamic float64 x;
  dynamic float64 y;
  dynamic float64 mX;
  dynamic float64 mY;
  dynamic float64 ssXY;
  dynamic float64 ssXX;
  dynamic float64 alpha;
  dynamic float64 beta;
  precise int count;

  precise int idx;

  precise float64 tempF;
  dynamic float64 tempDF;

  mX = 0.0;
  mY = 0.0;
  ssXY = 0.0;
  ssXX = 0.0;
  count = 0;
  idx = 0;
  repeat WorkPerThread {
    tempF = X[((q- 1)*WorkPerThread)+idx];
    x = track(tempF, 0.001, 0.99);
    tempF = Y[((q- 1)*WorkPerThread)+idx];
    y = track(tempF, 0.001, 0.99);    
    mX = mX+x;
    mY = mY+y;
    tempDF = x*y;
    ssXY = ssXY+tempDF;
    tempDF = x*x;
    ssXX = ssXX+tempDF;
    count = count+1;
    idx = idx+1;
  };
  tempF = convertToFloat(count);
  mX = mX/tempF;
  mY = mY/tempF;
  tempDF = mX*mY;
  tempDF = tempDF*tempF;
  ssXY = ssXY-tempDF;
  tempDF = mX*mX;
  tempDF = tempDF*tempF;
  ssXX = ssXX-tempDF;
  beta = ssXY/ssXX;
  tempDF = beta*mX;
  alpha = mY-tempDF;
  send(0, dynamic float64, alpha);
  send(0, dynamic float64, beta);
  send(0, precise int, count);
]