Q = {1,2,3,4,5,6,7,8,9,10};

0:[
  dynamic float64 workerAlpha;
  dynamic float64 workerBeta;
  precise int workerSamples;

  dynamic float64 alpha;
  dynamic float64 beta;
  precise int totalSamples;

  precise float64 tempF;
  dynamic float64 tempDF0;
  dynamic float64 tempDF1;

  totalSamples = 0;
  alpha = 0.0;
  beta  = 0.0;

  for q in Q do {
    workerAlpha = receive(q, dynamic float64);
    workerBeta  = receive(q, dynamic float64);
    workerSamples = receive(q, precise int);
    tempF = convertToFloat(workerSamples);
    tempDF0 = workerAlpha*tempF; tempDF1 = alpha+tempDF0; alpha = tempDF1;
    tempDF0 = workerBeta*tempF; tempDF1 = beta+tempDF0; beta  = tempDF1;
    totalSamples = totalSamples + workerSamples;
  };

  tempF = convertToFloat(totalSamples);
  tempDF0 = alpha/tempF; alpha = tempDF0;
  tempDF0 = beta/tempF; beta = tempDF0;
  ## check(alpha, 0.99, 0.01);
  ## check(beta , 0.99, 0.01);
  Alpha = alpha;
  Beta = beta;
] ||
q in Q:[
  dynamic float64 x;
  dynamic float64 y;
  dynamic float64 mX;
  dynamic float64 mY;
  dynamic float64 ssXY;
  dynamic float64 ssXX;
  dynamic float64 alpha;
  dynamic float64 beta;
  precise int count;

  precise int idx;

  precise float64 tempF;
  dynamic float64 tempDF0;
  dynamic float64 tempDF1;

  mX = 0.0;
  mY = 0.0;
  ssXY = 0.0;
  ssXX = 0.0;
  count = 0;
  idx = 0;
  repeat WorkPerThread {
    tempF = X[((q- 1)*WorkPerThread)+idx];
    x = track(tempF, 0.001, 0.99);
    tempF = Y[((q- 1)*WorkPerThread)+idx];
    y = track(tempF, 0.001, 0.99);
    tempDF0 = mX+x; mX = tempDF0;
    tempDF0 = mY+y; mY = tempDF0;
    tempDF0 = x*y; tempDF1 = ssXY+tempDF0; ssXY = tempDF1;
    tempDF0 = x*x; tempDF1 = ssXX+tempDF0; ssXX = tempDF1;
    count = count+1;
    idx = idx+1;
  };
  tempF = convertToFloat(count);
  tempDF0 = mX/tempF; mX = tempDF0;
  tempDF0 = mY/tempF; mY = tempDF0;
  tempDF0 = mX*mY; tempDF1 = tempDF0*tempF; tempDF0 = ssXY-tempDF1; ssXY = tempDF0;
  tempDF0 = mX*mX; tempDF1 = tempDF0*tempF; tempDF0 = ssXX-tempDF1; ssXX = tempDF0;
  beta = ssXY/ssXX;
  tempDF0 = beta*mX; alpha = mY-tempDF0;
  send(0, dynamic float64, alpha);
  send(0, dynamic float64, beta);
  send(0, precise int, count);
]