Q = {1,2,3,4,5,6,7,8,9,10};
precise float64 [__ARRAYSZ__] Input;

0:[
  dynamic float64[__ARRAYSZ__] array;
  dynamic float32[__ARRAYSZ__] array32;
  dynamic float32[__SLICESZ__] slice;

  precise int idx0;
  precise int idx1;

  dynamic float64 tempDF64;
  dynamic float32 tempDF32;

  array = Input;

  idx0 = 0;
  repeat ArraySize {
    tempDF64 = array[idx0];
    tempDF32 = (dynamic float32)tempDF64;
    array32[idx0] = tempDF32;
    idx0 = idx0 + 1;
  };

  repeat Iterations {    
    for q in Q do {
      send(q, dynamic float32[], array32);
    };
    idx0 = 0;
    for q in Q do {
      slice = receive(q, dynamic float32[]);
      idx1 = 0;
      repeat SliceSize {
        tempDF32 = slice[idx1];
	array32[idx0] = tempDF32;
	idx0 = idx0 + 1;
	idx1 = idx1 + 1;
      };
    };
  };

  idx0 = 0;
  repeat ArraySize {
    tempDF32 = array32[idx0];
    tempDF64 = (dynamic float64)tempDF32;
    array64[idx0] = tempDF64;
    idx0 = idx0 + 1;
  };

  ## diesel.PrintWorstElement(DynMap[:], 0, __ARRAYSZ__) ##;
]

||

q in Q:[
  dynamic float64[__ARRAYSZ__] array;
  dynamic float64[__SLICESZ__] slice;
  dynamic float32[__ARRAYSZ__] array32;
  dynamic float32[__SLICESZ__] slice32;

  precise int idx0;
  dynamic float64 tempDF64;
  dynamic float32 tempDF32;

  precise int myStartRow;
  precise int rowIdx;
  precise int colIdx;
  precise int outIdx;

  precise int firstRow;
  precise int lastRow;
  precise int edgeRow;

  dynamic float64 tempDF0;
  dynamic float64 tempDF1;
  dynamic float64 tempDF2;

  myStartRow = (q - 1)*RowsPerThread;

  repeat Iterations {
    array32 = receive(0, dynamic float32[]);
    idx0 = 0;
    repeat ArraySize {
      tempDF32 = array32[idx0];
      tempDF64 = (dynamic float64)tempDF32;
      array[idx0] = tempDF64;
      idx0 = idx0 + 1;
    };
    rowIdx = myStartRow;
    outIdx = 0;
    repeat RowsPerThread {
      colIdx = 0;
      firstRow = (rowIdx == 0);
      lastRow = (rowIdx == (ArrayDim - 1));
      edgeRow = firstRow || lastRow;
      if edgeRow then {
        repeat ArrayDim {
          tempDF0 = array[(rowIdx * ArrayDim) + colIdx];
	  slice[outIdx] = tempDF0;
	  colIdx = colIdx + 1;
	  outIdx = outIdx + 1;
	};
      } else {
        tempDF0 = array[rowIdx * ArrayDim];
	slice[outIdx] = tempDF0;
	outIdx = outIdx + 1;
	colIdx = 1;
	repeat InnerDim {
	  tempDF0 = array[((rowIdx - 1) * ArrayDim) + colIdx];
	  tempDF1 = array[((rowIdx + 1) * ArrayDim) + colIdx];
	  tempDF2 = tempDF0 + tempDF1;
	  tempDF0 = array[(rowIdx * ArrayDim) + colIdx - 1];
	  tempDF1 = tempDF2 + tempDF0;
	  tempDF2 = array[(rowIdx * ArrayDim) + colIdx + 1];
	  tempDF0 = tempDF1 + tempDF2;
	  tempDF1 = array[(rowIdx * ArrayDim) + colIdx];
	  tempDF2 = tempDF0 + tempDF1;
	  tempDF0 = tempDF2 / 5.0;
	  slice[outIdx] = tempDF0;
	  colIdx = colIdx + 1;
	  outIdx = outIdx + 1;
	};
        tempDF0 = array[(rowIdx * ArrayDim) + colIdx];
	slice[outIdx] = tempDF0;
	outIdx = outIdx + 1;
      };
      rowIdx = rowIdx + 1;
    };
    idx0 = 0;
    repeat SliceSize {
      tempDF64 = slice[idx0];
      tempDF32 = (dynamic float32)tempDF64;
      slice32[idx0] = tempDF32;
      idx0 = idx0 + 1;
    };
    send(0, dynamic float32[], slice32);
  };
]