Q = {1,2,3,4,5,6,7,8,9,10};

0:[
  precise int mainIdx; precise int sliceIdx;

  dynamic float32 [10000] array32;
  dynamic float32 [1000] slice;
  dynamic float32 elem;

  array32 = (dynamic float32[]) Input;

  mainIdx = 0;
  for q in Q do {
    send(q, precise int, mainIdx);
    mainIdx = mainIdx+1;
  };

  repeat 10 {
    for q in Q do {
      send(q, dynamic float32[], array32);
    };
    mainIdx = 0;
    for q in Q do {
      slice = receive(q, dynamic float32[]);
      sliceIdx = 0;
      repeat 1000 {
        elem = slice[sliceIdx];
        array32[mainIdx] = elem;
        sliceIdx = sliceIdx+1;
        mainIdx = mainIdx+1;
      };
    };
  };
  Output = (dynamic float64[]) array32;
]

||

q in Q:[
  precise int threadId; precise int skipRow;
  precise int rowIdx; precise int colIdx; precise int sliceIdx;

  dynamic float32 [10000] array32;
  dynamic float32 [1000] slice;
  dynamic float32 elem; dynamic float32 sum;

  threadId = receive(0, precise int);
  repeat 10 {
    array32 = receive(0, dynamic float32[]);
    rowIdx = threadId*10;
    sliceIdx = 0;
    repeat 10 {
      skipRow = (rowIdx==0) || (rowIdx==99);
      if skipRow then {
        colIdx = 0;
        repeat 100 {
          elem = array32[rowIdx*100+colIdx];
          slice[sliceIdx] = elem;
          colIdx = colIdx+1;
          sliceIdx = sliceIdx+1;
        };
      } else {
        colIdx = 0;
        elem = array32[rowIdx*100+colIdx];
        slice[sliceIdx] = elem;
        colIdx = colIdx+1;
        sliceIdx = sliceIdx+1;
        repeat 98 {
          sum = array32[rowIdx*100+colIdx];
          elem = array32[rowIdx*100+colIdx-1];
          sum = sum+elem;
          elem = array32[rowIdx*100+colIdx+1];
          sum = sum+elem;
          elem = array32[rowIdx*100-100+colIdx];
          sum = sum+elem;
          elem = array32[rowIdx*100+100+colIdx];
          sum = sum+elem;
          sum = sum/5.0;
          slice[sliceIdx] = sum;
          colIdx = colIdx+1;
          sliceIdx = sliceIdx+1;
        }
        elem = array32[rowIdx*100+colIdx];
        slice[sliceIdx] = elem;
        colIdx = colIdx+1;
        sliceIdx = sliceIdx+1;
      };
      rowIdx = rowIdx+1;
    };
    send(0, dynamic float32[], slice);
  };
]
