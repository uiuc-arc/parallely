package main

import "fmt"
import "LIBRARYNAME"
import "os"
import  "io/ioutil"
import  "strings"
import  "strconv"

var Num_threads int
var Edges [__NUMEDGES__]int
var Inlinks [__NUMNODES__]int
var Outlinks [__NUMNODES__]int
var DistGlobal [__NUMNODES__]int
var Num_nodes int
var Num_edges int
var NodesPerThread int

func max(x, y int) int {
	if x > y {
		return x;
	} else {
		return y;
	}
}

func min(x, y int) int {
	if x < y {
		return x;
	} else {
		return y;
	}
}

func convertToFloat(x int) float64 {
	return float64(x)
}
	
__GLOBAL_DECS__

__FUNC_DECS__

func main() {
	fmt.Println("Starting main thread");

  Num_threads = __NUM_THREADS__;
	
  data_bytes, _ := ioutil.ReadFile("../../inputs/__FILENAME__")
  Num_nodes = __NUMNODES__ // strconv.Atoi(os.Args[2])
  Num_edges = __NUMNODES__ * __MAX_DEGREE_

  fmt.Println("Starting reading the file")
  data_string := string(data_bytes)
  data_str_array := strings.Split(data_string, "\n")

  fmt.Println("Setting up the data structures")

  for i := range Inlinks{
    Inlinks[i] = 0
    Outlinks[i] = 0
    DistGlobal[i] = 0
  }
  DistGlobal[0] = 1

  NodesPerThread = Num_nodes/Num_threads;

  fmt.Println("Populating the data structures")
  for i := 1; i<len(data_str_array)-1 ; i++ {
    elements := strings.Fields(data_str_array[i])
    index1, _ := strconv.Atoi(elements[0])
    index2, _ := strconv.Atoi(elements[1])

    Edges[(index2 * __MAX_DEGREE_) + Inlinks[index2]] = index1
    Inlinks[index2]++
    Outlinks[index1]++
		// fmt.Println("---------------")
  }

  fmt.Println("Number of worker threads: ", Num_threads);
  fmt.Println("Number of nodes: ", len(DistGlobal));
  fmt.Println("Size of Inlinks: ", len(Inlinks));

	__START__THREADS__

	fmt.Println("Done!");
  f, _ := os.Create("output.txt")
  defer f.Close()

  for i := range DistGlobal{
    f.WriteString(fmt.Sprintln(DistGlobal[i]))
  }
}
