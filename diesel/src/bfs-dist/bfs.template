Q = {1,2,3,4,5,6,7,8,9,10};
dynamic int [__NUMNODES__] DistGlobal;
precise int NodesPerThread;
precise int Num_threads;
precise int Num_nodes;

0:[
  dynamic int [__NUMNODES__] distance;
  dynamic int [__SLICESIZE__] slice;
  dynamic int newDist;

  precise int mystart;
  precise int myend;
  precise int i;
  precise int j;
  precise int lastthread;
  precise int mysize;

  distance = DistGlobal;

  ## LIBRARYNAME.StartTiming() ##;

  i = 0;
  for q in Q do {
    mystart = i*NodesPerThread;
	  myend = (i+1)*NodesPerThread;
    lastthread = (i == Num_threads - 1);
    if lastthread then {
       myend = Num_nodes;
    };
    send(q, precise int, mystart);
    send(q, precise int, myend);

    i = i + 1;
  };

  repeat 10 {
    for q in Q do {
      send(q, dynamic int[], distance);
    };
    i = 0;
    for q in Q do {
        mystart = i*NodesPerThread;
        myend = (i+1)*NodesPerThread;
        lastthread = (i == Num_threads - 1);
        if lastthread then {
           myend = Num_nodes;
        };

        slice = receive(q, dynamic int[]);        

        mysize = myend - mystart;
        j = 0;
        repeat mysize {
          newDist = slice[j];
          distance[mystart + j] = newDist;
          j = j + 1;
        };
        i = i + 1;
    };  
  };

  ## LIBRARYNAME.EndTiming() ##;

  DistGlobal = distance;
]

||

q in Q:[
  precise int [__NUMEDGES__] edges;
  precise int [__NUMNODES__] inlinks;
  dynamic int [__NUMNODES__] distances;
  dynamic int distance;
  dynamic int [__SLICESIZE__] newDistance;
  dynamic int condition;

  precise int inlink;
  precise int neighbor;
  
  precise int nodeInlinks;
  precise int i;
  precise int mystart;
  precise int myend;
  precise int cur;
  dynamic int temp;
  dynamic int temp1;
  dynamic int temp2;  

  precise int mysize;
  
  mystart = receive(0, precise int);
  myend = receive(0, precise int);
  edges = Edges;
  inlinks = Inlinks;

  repeat 10 {
    distances = receive(0, dynamic int[]);
    mysize = myend - mystart;
    i = 0;
    repeat mysize {
      cur = mystart + i;
      nodeInlinks = inlinks[cur];
      distance = distances[cur];
      inlink = 0;
      repeat nodeInlinks {
        neighbor = edges[cur*__MAX_DEGREE_ + inlink];
        temp = distances[neighbor];
        condition = (temp == 1);
        temp1 = 1;
        temp2 = 2;
        distance = condition ? temp1 temp2;
        inlink = inlink + 1;
      };
      temp = distance;
      newDistance[i] = temp;
      i = i +1;
    };

    send(0, dynamic int[], newDistance);
  };
]