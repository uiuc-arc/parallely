Q = {1,2,3,4,5,6,7,8,9,10};
precise float64 [] PagerankGlobal;

0:[
  dynamic float64 [Num_nodes] pageranks;
  dynamic float64 newPagerank;

  precise int mystart;
  precise int myend;
  precise int i;
  precise int j;
  precise int lastthread;
  precise int mysize;

  pageranks = PagerankGlobal;  

  i = 0;
  for q in Q do {
    mystart = i*NodesPerThread;
	  myend = (i+1)*NodesPerThread;
    lastthread = (i == Num_threads);
    if lastthread then {
       myend = Num_nodes;
    };

    send(q, precise int[], Edges);
    send(q, precise int[], Inlinks);
    send(q, precise int[], Outlinks);
    send(q, precise int, mystart);
    send(q, precise int, myend);

    i = i + 1;
  };
  
  repeat 10 {
    for q in Q do {
      send(q, precise float64[], pageranks);
    };
    i = 0;
    for q in Q do {
        mystart = i*NodesPerThread;
        myend = (i+1)*NodesPerThread;
        lastthread = (i == Num_threads);
        if lastthread then {
           myend = Num_nodes;
        };

        mysize = myend - mystart;
        j = 0;
        repeat mysize {
          newPagerank = receive(q, precise float64);
          pageranks[mystart + j] = newPagerank;
          j = j + 1;
        };
    };
    i = i + 1;
  };

  PagerankGlobal = pageranks;
]

||

q in Q:[
  precise int [Num_edges] edges;
  precise int [Num_nodes] inlinks;
  precise int [Num_nodes] outlinks;
  dynamic float64 [Num_nodes] pageranks;
  precise int inlink;
  precise int neighbor;
  precise int outN;
  precise float64 outNf;
  dynamic float64 current;
  dynamic float64 [10000] newPagerank;
  precise int nodeInlinks;
  precise int i;
  precise int mystart;
  precise int myend;
  dynamic int cur;
  dynamic float64 temp;
  dynamic float64 temp0;
  dynamic float64 temp1;
  precise int mysize;

  edges = receive(0, precise int[]);
  inlinks = receive(0, precise int[]);
  outlinks = receive(0, precise int[]);  
  mystart = receive(0, precise int);
  myend = receive(0, precise int);

  repeat 10 {
    pageranks = receive(0, precise float64[]);
    newPagerank[i] = 0.15;
    inlink = 0;
    mysize = myend - mystart;
    i = 0;
    repeat mysize {
      cur = mystart + i;
      nodeInlinks = inlinks[cur];   
      repeat nodeInlinks {
        neighbor = edges[cur*Num_edges/Num_nodes + inlink];
        outN = outlinks[neighbor];
        outNf = convertToFloat(outN);
        current = pageranks[neighbor];
        temp0 = newPagerank[i];
        temp1 = temp0 + 0.85 * current / outNf;
        newPagerank[i] = temp1;
        inlink = inlink + 1;
      };
      i = i +1;
    };

    i = 0;
    repeat mysize {
      temp0 = newPagerank[i];
      temp = temp0 [0.9999] -1;
      send(0, precise float64, temp);
      i = i + 1;
    };
  };
]