Q = {1,2,3,4,5,6,7,8};

0:[
  dynamic int bestRow;
  dynamic int bestCol;
  dynamic int minSSD;

  dynamic int workerBestRow;
  dynamic int workerBestCol;
  dynamic int workerMinSSD;

  dynamic int foundNewBest;

  minSSD = 9223372036854775807;
  bestRow = -1;
  bestCol = -1;

  for q in Q do {
    workerMinSSD = receive(q, dynamic int);
    workerBestRow = receive(q, dynamic int);
    workerBestCol = receive(q, dynamic int);
    foundNewBest = (workerMinSSD < minSSD);
    minSSD = foundNewBest ? workerMinSSD minSSD;
    bestRow = foundNewBest ? workerBestRow bestRow;
    bestCol = foundNewBest ? workerBestCol bestCol;
  };
  ## fmt.Println(DynMap[0], DynMap[1], DynMap[2]) ##;
  BestRow = bestRow;
  BestCol = bestCol;
]

||

q in Q:[
  precise int preciseSSD;
  dynamic int ssd;
  dynamic int minSSD;
  dynamic int bestRow;
  dynamic int bestCol;


  dynamic int foundNewBest;
  dynamic int tempDI;

  precise int rowIdx;
  precise int colIdx;

  minSSD = 9223372036854775807;
  bestRow = -1;
  bestCol = -1;

  rowIdx = (q - 1)*RowsPerWorker;

  repeat RowsPerWorker {
    colIdx = 0;
    repeat Cols {
      preciseSSD = calcSSD(rowIdx, colIdx);
      ssd = track(preciseSSD, 0.0, 0.9999999);
      foundNewBest = (ssd < minSSD);
      minSSD = foundNewBest ? ssd minSSD;
      tempDI = track(rowIdx, 0.0, 1.0);
      bestRow = foundNewBest ? tempDI bestRow;
      tempDI = track(colIdx, 0.0, 1.0);
      bestCol = foundNewBest ? tempDI bestCol;
      colIdx = colIdx + 1;
    };
    rowIdx = rowIdx + 1;
  };

  send(0, dynamic int, minSSD);
  send(0, dynamic int, bestRow);
  send(0, dynamic int, bestCol);
]