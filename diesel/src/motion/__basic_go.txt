package main

import (
  "fmt"
  "math"
  "math/rand"
  "os"
  "strconv"
  "time"
  "diesel"
)

const blockDim = 8
const workers = 8

var RowsPerWorker, Cols, arrayDim, BestRow, BestCol int

var refBlock, searchBlocks []int

const (
  // single whitespace character
  ws = "[ \n\r\t\v\f]"
  // isolated comment
  cmt = "#[^\n\r]*"
  // comment sub expression
  cmts = "(" + ws + "*" + cmt + "[\n\r])"
  // number with leading comments
  num = "(" + cmts + "+" + ws + "*|" + ws + "+)([0-9]+)"
)

func calcSSD(row, col int) int {
  ssd := 0
  for i := 0; i < blockDim; i++ {
    for j := 0; j < blockDim; j++ {
      diff := refBlock[i*blockDim+j] - searchBlocks[(row+i)*arrayDim+(col+j)]
      ssd += diff*diff
    }
  }
  return ssd
}

__GLOBAL_DECS__

__FUNC_DECS__

func main() {
  // rand.Seed(time.Now().UTC().UnixNano())
  seed := int64(12345)
  rand.Seed(seed) // deterministic seed for reproducibility

  RowsPerWorker, _ = strconv.Atoi(os.Args[1])
  Cols = workers*RowsPerWorker
  arrayDim = Cols+blockDim-1

  refBlock = make([]int, blockDim*blockDim)
  searchBlocks = make([]int, arrayDim*arrayDim)

  fmt.Println("Generating blocks using random seed",math.Abs(float64(seed)))

  for i := 0; i < blockDim*blockDim; i++ {
    refBlock[i] = rand.Intn(256)
  }
  for i := 0; i < arrayDim*arrayDim; i++ {
    searchBlocks[i] = rand.Intn(256)
  }

  fmt.Println("Starting program");
	
  diesel.InitChannels(__NUM_THREADS__);

  startTime := time.Now()
  __START__THREADS__

  fmt.Println("Main thread waiting for others to finish");  
  diesel.Wg.Wait()

  end := time.Now()
  elapsed := end.Sub(startTime)
  fmt.Println("Elapsed time :", elapsed.Nanoseconds())

  fmt.Println(BestRow, BestCol)
}
