package main

import "fmt"
import "dieseldistrel"
import "os"
import "math"
import  "io/ioutil"
import  "strings"
import  "strconv"

var Num_threads int
var Edges [2268700]int
var Inlinks [22687]int
var Outlinks [22687]int
var PagerankGlobal [22687]float64
var Num_nodes int
var Num_edges int
var NodesPerThread int

func max(x, y int) int {
	if x > y {
		return x;
	} else {
		return y;
	}
}

func min(x, y int) int {
	if x < y {
		return x;
	} else {
		return y;
	}
}

func convertToFloat(x int) float64 {
	return float64(x)
}
	
__GLOBAL_DECS__

__FUNC_DECS__

func main() {
	fmt.Println("Starting main thread");

  Num_threads = __NUM_THREADS__;
	
  data_bytes, err := ioutil.ReadFile("../../inputs/p2p-Gnutella25.txt")
  if err != nil {
     fmt.Println("[ERROR] Input does not exist")
     os.Exit(-1)
  }
  
  Num_nodes = int(math.Abs(22687)) // strconv.Atoi(os.Args[2])
  Num_edges = 2268700

  // fmt.Println("Starting reading the file")
  data_string := string(data_bytes)
  data_str_array := strings.Split(data_string, "\n")

  for i := range Inlinks{
    Inlinks[i] = 0
    Outlinks[i] = 0
    PagerankGlobal[i] = 0.15
  }

  NodesPerThread = Num_nodes/Num_threads;

  // fmt.Println("Populating the data structures")
  for i := 1; i<len(data_str_array)-1 ; i++ {
    elements := strings.Fields(data_str_array[i])
    index1, _ := strconv.Atoi(elements[0])
    index2, _ := strconv.Atoi(elements[1])

    Edges[(index2 * 100) + Inlinks[index2]] = index1
    Inlinks[index2]++
    Outlinks[index1]++
  }

	__START__THREADS__
}
