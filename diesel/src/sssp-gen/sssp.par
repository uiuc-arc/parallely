Q = {1,2,3,4,5,6,7,8,9,10};
precise int [36682] DistGlobal;
precise int [36682000] Edges;
precise int [36682] Inlinks;
precise int [36682] Outlinks;
precise int NodesPerThread;
precise int Num_threads;
precise int Num_nodes;

0:[
  dynamic int [36682] distance;
  dynamic int newDist;

  precise int mystart;
  precise int myend;
  precise int i;
  precise int j;
  precise int lastthread;
  precise int mysize;

  distance = DistGlobal;  

  i = 0;
  for q in Q do {
    mystart = i*NodesPerThread;
	  myend = (i+1)*NodesPerThread;
    lastthread = (i == Num_threads - 1);
    if lastthread then {
       myend = Num_nodes;
    };

    send(q, precise int, mystart);
    send(q, precise int, myend);

    i = i + 1;
  };
  
  repeat 5 {
    for q in Q do {
      send(q, dynamic int[], distance);
    };
    i = 0;
    for q in Q do {
        mystart = i*NodesPerThread;
        myend = (i+1)*NodesPerThread;
        lastthread = (i == Num_threads - 1);
        if lastthread then {
           myend = Num_nodes;
        };

        mysize = myend - mystart;
        j = 0;
        repeat mysize {
          newDist = receive(q, dynamic int);
          distance[mystart + j] = newDist;
          j = j + 1;
        };
        i = i + 1;
    };
    ## parallely.DumpDynMap(DynMap, "dynmap" + strconv.Itoa(__temp_0));
  };

  checkarray(distance, 0.99);
  DistGlobal = distance;
]

||

q in Q:[
  precise int [36682000] edges;
  precise int [36682] inlinks;
  dynamic int [36682] distances;
  dynamic int distance;
  dynamic int [10000] newDistance;
  dynamic int condition;

  precise int inlink;
  precise int neighbor;
  
  precise int nodeInlinks;
  precise int i;
  precise int mystart;
  precise int myend;
  precise int cur;
  dynamic int temp;
  dynamic int temp0;
  precise int mysize;

  edges = Edges;
  inlinks = Inlinks;
  mystart = receive(0, precise int);
  myend = receive(0, precise int);

  repeat 5 {
    distances = receive(0, precise int[]);
    mysize = myend - mystart;
    i = 0;
    repeat mysize {
      cur = mystart + i;
      nodeInlinks = inlinks[cur];
      inlink = 0;
      repeat nodeInlinks {
        distance = distances[cur];
        neighbor = edges[cur*1000 + inlink];
        temp = distances[neighbor];        
        condition = (distance > temp + 1);        
        distance = condition ? temp distance;
        inlink = inlink + 1;
      };
      newDistance[i] = distance;
      i = i +1;
    };

    i = 0;
    repeat mysize {
      temp0 = newDistance[i];
      temp = temp0 [0.999999] -1;
      send(0, precise int, temp);
      i = i + 1;
    };
  };
]