# Generated from GoLang.g4 by ANTLR 4.7.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"M\u03ec\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
        buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
        buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
        buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
        buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
        buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA")
        buf.write(u"\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\t")
        buf.write(u"J\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S")
        buf.write(u"\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4")
        buf.write(u"\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t")
        buf.write(u"d\3\2\3\2\3\2\3\2\3\2\7\2\u00ce\n\2\f\2\16\2\u00d1\13")
        buf.write(u"\2\3\2\3\2\3\2\5\2\u00d6\n\2\3\2\3\2\7\2\u00da\n\2\f")
        buf.write(u"\2\16\2\u00dd\13\2\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\7\4\u00e8\n\4\f\4\16\4\u00eb\13\4\3\4\5\4\u00ee\n")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\7\4\u00f5\n\4\f\4\16\4\u00f8\13")
        buf.write(u"\4\3\4\3\4\3\4\5\4\u00fd\n\4\3\5\5\5\u0100\n\5\3\5\3")
        buf.write(u"\5\3\6\3\6\3\7\3\7\3\7\5\7\u0109\n\7\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\7\b\u0111\n\b\f\b\16\b\u0114\13\b\3\b\5\b\u0117")
        buf.write(u"\n\b\3\t\3\t\5\t\u011b\n\t\3\t\3\t\5\t\u011f\n\t\3\n")
        buf.write(u"\3\n\3\n\7\n\u0124\n\n\f\n\16\n\u0127\13\n\3\13\3\13")
        buf.write(u"\3\13\7\13\u012c\n\13\f\13\16\13\u012f\13\13\3\f\3\f")
        buf.write(u"\3\f\3\f\3\f\3\f\7\f\u0137\n\f\f\f\16\f\u013a\13\f\3")
        buf.write(u"\f\5\f\u013d\n\f\3\r\3\r\5\r\u0141\n\r\3\r\3\r\3\16\3")
        buf.write(u"\16\3\16\3\16\5\16\u0149\n\16\3\17\3\17\3\17\3\17\3\17")
        buf.write(u"\5\17\u0150\n\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\7\21\u015a\n\21\f\21\16\21\u015d\13\21\3\21\5\21")
        buf.write(u"\u0160\n\21\3\22\3\22\3\22\3\22\5\22\u0166\n\22\3\22")
        buf.write(u"\3\22\5\22\u016a\n\22\3\23\3\23\5\23\u016e\n\23\3\23")
        buf.write(u"\3\23\3\24\3\24\3\24\6\24\u0175\n\24\r\24\16\24\u0176")
        buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u017f\n\25\f\25\16")
        buf.write(u"\25\u0182\13\25\3\25\3\25\3\25\6\25\u0187\n\25\r\25\16")
        buf.write(u"\25\u0188\3\25\3\25\3\25\3\25\3\25\7\25\u0190\n\25\f")
        buf.write(u"\25\16\25\u0193\13\25\3\25\3\25\3\25\3\25\3\25\6\25\u019a")
        buf.write(u"\n\25\r\25\16\25\u019b\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write(u"\3\25\3\25\3\25\3\25\5\25\u01a8\n\25\3\26\3\26\3\26\3")
        buf.write(u"\26\3\26\5\26\u01af\n\26\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write(u"\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\5\33\u01bf\n")
        buf.write(u"\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write(u"\3\36\3\36\3\37\3\37\5\37\u01cf\n\37\3 \3 \5 \u01d3\n")
        buf.write(u" \3!\3!\5!\u01d7\n!\3\"\3\"\3\"\3#\3#\3$\3$\3$\3$\3$")
        buf.write(u"\3$\3$\3$\3$\3$\5$\u01e8\n$\3%\3%\3%\3%\5%\u01ee\n%\3")
        buf.write(u"%\3%\3%\3%\3%\5%\u01f5\n%\5%\u01f7\n%\3&\3&\5&\u01fb")
        buf.write(u"\n&\3\'\3\'\3\'\3\'\5\'\u0201\n\'\3\'\5\'\u0204\n\'\3")
        buf.write(u"\'\3\'\7\'\u0208\n\'\f\'\16\'\u020b\13\'\3\'\3\'\3(\3")
        buf.write(u"(\3(\5(\u0212\n(\3)\3)\3)\5)\u0217\n)\3*\3*\3*\3*\5*")
        buf.write(u"\u021d\n*\3*\3*\3*\7*\u0222\n*\f*\16*\u0225\13*\3*\3")
        buf.write(u"*\3+\3+\5+\u022b\n+\3+\3+\3+\3+\3+\3+\3,\3,\3,\5,\u0236")
        buf.write(u"\n,\3-\3-\3-\5-\u023b\n-\3.\3.\5.\u023f\n.\3.\3.\3.\5")
        buf.write(u".\u0244\n.\7.\u0246\n.\f.\16.\u0249\13.\3/\3/\3/\7/\u024e")
        buf.write(u"\n/\f/\16/\u0251\13/\3/\3/\3\60\3\60\3\60\5\60\u0258")
        buf.write(u"\n\60\3\61\3\61\3\61\5\61\u025d\n\61\3\61\5\61\u0260")
        buf.write(u"\n\61\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0268\n\62\3")
        buf.write(u"\62\3\62\3\63\3\63\3\63\3\63\5\63\u0270\n\63\3\63\3\63")
        buf.write(u"\3\64\5\64\u0275\n\64\3\64\3\64\5\64\u0279\n\64\3\64")
        buf.write(u"\3\64\5\64\u027d\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5")
        buf.write(u"\65\u0285\n\65\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67")
        buf.write(u"\3\67\3\67\3\67\3\67\5\67\u0293\n\67\38\38\58\u0297\n")
        buf.write(u"8\39\39\39\39\39\39\39\39\59\u02a1\n9\3:\3:\3:\3:\3:")
        buf.write(u"\3;\3;\3<\3<\3=\3=\3=\3>\3>\3>\3>\3>\7>\u02b4\n>\f>\16")
        buf.write(u">\u02b7\13>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3A\3")
        buf.write(u"A\3A\3A\3A\5A\u02ca\nA\3A\3A\3B\3B\3B\3B\3B\3B\3B\5B")
        buf.write(u"\u02d5\nB\3C\3C\3C\3D\3D\3D\3D\5D\u02de\nD\3E\3E\5E\u02e2")
        buf.write(u"\nE\3F\3F\3F\3F\7F\u02e8\nF\fF\16F\u02eb\13F\3F\5F\u02ee")
        buf.write(u"\nF\5F\u02f0\nF\3F\3F\3G\5G\u02f5\nG\3G\5G\u02f8\nG\3")
        buf.write(u"G\3G\3H\3H\3H\5H\u02ff\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H")
        buf.write(u"\3H\3H\3H\3H\3H\3H\7H\u0310\nH\fH\16H\u0313\13H\3I\3")
        buf.write(u"I\3I\5I\u0318\nI\3I\3I\3I\3I\3I\3I\5I\u0320\nI\7I\u0322")
        buf.write(u"\nI\fI\16I\u0325\13I\3J\3J\3J\5J\u032a\nJ\3K\3K\3K\3")
        buf.write(u"K\5K\u0330\nK\3K\3K\3L\3L\3L\3L\3L\3L\5L\u033a\nL\3M")
        buf.write(u"\3M\3M\5M\u033f\nM\3N\3N\3N\3N\3N\3N\5N\u0347\nN\3O\3")
        buf.write(u"O\3P\3P\5P\u034d\nP\3Q\3Q\3Q\3Q\3R\3R\3R\3S\3S\3S\3S")
        buf.write(u"\3S\3S\3S\3S\3S\5S\u035f\nS\3T\3T\3T\5T\u0364\nT\5T\u0366")
        buf.write(u"\nT\3T\3T\3U\3U\3U\7U\u036d\nU\fU\16U\u0370\13U\3V\3")
        buf.write(u"V\3V\5V\u0375\nV\3V\3V\3W\3W\3W\5W\u037c\nW\3X\3X\5X")
        buf.write(u"\u0380\nX\3Y\3Y\3Y\3Y\3Y\7Y\u0387\nY\fY\16Y\u038a\13")
        buf.write(u"Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\5Z\u0393\nZ\3Z\5Z\u0396\nZ\3[")
        buf.write(u"\3[\3\\\5\\\u039b\n\\\3\\\3\\\3]\3]\3]\3]\3^\3^\3^\3")
        buf.write(u"^\3_\3_\5_\u03a9\n_\3_\3_\5_\u03ad\n_\3_\5_\u03b0\n_")
        buf.write(u"\3_\3_\3_\3_\3_\5_\u03b7\n_\3_\3_\3`\3`\3`\3`\3`\3a\3")
        buf.write(u"a\3a\3a\3a\5a\u03c5\na\5a\u03c7\na\3a\5a\u03ca\na\3a")
        buf.write(u"\5a\u03cd\na\5a\u03cf\na\3a\3a\3b\3b\3b\6b\u03d6\nb\r")
        buf.write(u"b\16b\u03d7\3b\3b\3c\3c\3c\3c\3c\5c\u03e1\nc\3c\3c\5")
        buf.write(u"c\u03e5\nc\3d\3d\3d\5d\u03ea\nd\3d\2\4\u008e\u0090e\2")
        buf.write(u"\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write(u"\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write(u"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write(u"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write(u"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write(u"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\2\f\4\2\35")
        buf.write(u"\35((\4\2$$++\3\2)*\4\2\65:<@\4\2\66:?@\4\2\65\65<>\3")
        buf.write(u"\2/\64\3\2;A\4\2BDFG\3\2HI\2\u0429\2\u00c8\3\2\2\2\4")
        buf.write(u"\u00de\3\2\2\2\6\u00fc\3\2\2\2\b\u00ff\3\2\2\2\n\u0103")
        buf.write(u"\3\2\2\2\f\u0108\3\2\2\2\16\u010a\3\2\2\2\20\u0118\3")
        buf.write(u"\2\2\2\22\u0120\3\2\2\2\24\u0128\3\2\2\2\26\u0130\3\2")
        buf.write(u"\2\2\30\u013e\3\2\2\2\32\u0144\3\2\2\2\34\u014a\3\2\2")
        buf.write(u"\2\36\u0151\3\2\2\2 \u0153\3\2\2\2\"\u0161\3\2\2\2$\u016b")
        buf.write(u"\3\2\2\2&\u0174\3\2\2\2(\u01a7\3\2\2\2*\u01ae\3\2\2\2")
        buf.write(u",\u01b0\3\2\2\2.\u01b2\3\2\2\2\60\u01b6\3\2\2\2\62\u01b9")
        buf.write(u"\3\2\2\2\64\u01be\3\2\2\2\66\u01c2\3\2\2\28\u01c6\3\2")
        buf.write(u"\2\2:\u01c8\3\2\2\2<\u01cc\3\2\2\2>\u01d0\3\2\2\2@\u01d4")
        buf.write(u"\3\2\2\2B\u01d8\3\2\2\2D\u01db\3\2\2\2F\u01e7\3\2\2\2")
        buf.write(u"H\u01e9\3\2\2\2J\u01fa\3\2\2\2L\u01fc\3\2\2\2N\u020e")
        buf.write(u"\3\2\2\2P\u0216\3\2\2\2R\u0218\3\2\2\2T\u022a\3\2\2\2")
        buf.write(u"V\u0232\3\2\2\2X\u023a\3\2\2\2Z\u023e\3\2\2\2\\\u024a")
        buf.write(u"\3\2\2\2^\u0254\3\2\2\2`\u025f\3\2\2\2b\u0267\3\2\2\2")
        buf.write(u"d\u026b\3\2\2\2f\u0274\3\2\2\2h\u0284\3\2\2\2j\u0289")
        buf.write(u"\3\2\2\2l\u0292\3\2\2\2n\u0296\3\2\2\2p\u02a0\3\2\2\2")
        buf.write(u"r\u02a2\3\2\2\2t\u02a7\3\2\2\2v\u02a9\3\2\2\2x\u02ab")
        buf.write(u"\3\2\2\2z\u02ae\3\2\2\2|\u02ba\3\2\2\2~\u02be\3\2\2\2")
        buf.write(u"\u0080\u02c9\3\2\2\2\u0082\u02d4\3\2\2\2\u0084\u02d6")
        buf.write(u"\3\2\2\2\u0086\u02dd\3\2\2\2\u0088\u02e1\3\2\2\2\u008a")
        buf.write(u"\u02e3\3\2\2\2\u008c\u02f4\3\2\2\2\u008e\u02fe\3\2\2")
        buf.write(u"\2\u0090\u0317\3\2\2\2\u0092\u0329\3\2\2\2\u0094\u032b")
        buf.write(u"\3\2\2\2\u0096\u0339\3\2\2\2\u0098\u033e\3\2\2\2\u009a")
        buf.write(u"\u0346\3\2\2\2\u009c\u0348\3\2\2\2\u009e\u034c\3\2\2")
        buf.write(u"\2\u00a0\u034e\3\2\2\2\u00a2\u0352\3\2\2\2\u00a4\u035e")
        buf.write(u"\3\2\2\2\u00a6\u0360\3\2\2\2\u00a8\u0369\3\2\2\2\u00aa")
        buf.write(u"\u0374\3\2\2\2\u00ac\u037b\3\2\2\2\u00ae\u037f\3\2\2")
        buf.write(u"\2\u00b0\u0381\3\2\2\2\u00b2\u0392\3\2\2\2\u00b4\u0397")
        buf.write(u"\3\2\2\2\u00b6\u039a\3\2\2\2\u00b8\u039e\3\2\2\2\u00ba")
        buf.write(u"\u03a2\3\2\2\2\u00bc\u03a6\3\2\2\2\u00be\u03ba\3\2\2")
        buf.write(u"\2\u00c0\u03bf\3\2\2\2\u00c2\u03d5\3\2\2\2\u00c4\u03e4")
        buf.write(u"\3\2\2\2\u00c6\u03e9\3\2\2\2\u00c8\u00c9\5\4\3\2\u00c9")
        buf.write(u"\u00cf\5\u00c6d\2\u00ca\u00cb\5\6\4\2\u00cb\u00cc\5\u00c6")
        buf.write(u"d\2\u00cc\u00ce\3\2\2\2\u00cd\u00ca\3\2\2\2\u00ce\u00d1")
        buf.write(u"\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0")
        buf.write(u"\u00db\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00d6\5\32\16")
        buf.write(u"\2\u00d3\u00d6\5\34\17\2\u00d4\u00d6\5\f\7\2\u00d5\u00d2")
        buf.write(u"\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5\u00d4\3\2\2\2\u00d6")
        buf.write(u"\u00d7\3\2\2\2\u00d7\u00d8\5\u00c6d\2\u00d8\u00da\3\2")
        buf.write(u"\2\2\u00d9\u00d5\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9")
        buf.write(u"\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\3\3\2\2\2\u00dd\u00db")
        buf.write(u"\3\2\2\2\u00de\u00df\7\20\2\2\u00df\u00e0\7\35\2\2\u00e0")
        buf.write(u"\5\3\2\2\2\u00e1\u00ed\7\31\2\2\u00e2\u00ee\5\b\5\2\u00e3")
        buf.write(u"\u00e9\7\36\2\2\u00e4\u00e5\5\b\5\2\u00e5\u00e6\5\u00c6")
        buf.write(u"d\2\u00e6\u00e8\3\2\2\2\u00e7\u00e4\3\2\2\2\u00e8\u00eb")
        buf.write(u"\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea")
        buf.write(u"\u00ec\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00ee\7\37\2")
        buf.write(u"\2\u00ed\u00e2\3\2\2\2\u00ed\u00e3\3\2\2\2\u00ee\u00fd")
        buf.write(u"\3\2\2\2\u00ef\u00f0\7\31\2\2\u00f0\u00f6\7\36\2\2\u00f1")
        buf.write(u"\u00f2\5\b\5\2\u00f2\u00f3\5\u00c6d\2\u00f3\u00f5\3\2")
        buf.write(u"\2\2\u00f4\u00f1\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f4")
        buf.write(u"\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f9\3\2\2\2\u00f8")
        buf.write(u"\u00f6\3\2\2\2\u00f9\u00fd\7\37\2\2\u00fa\u00fb\7\31")
        buf.write(u"\2\2\u00fb\u00fd\5\b\5\2\u00fc\u00e1\3\2\2\2\u00fc\u00ef")
        buf.write(u"\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\7\3\2\2\2\u00fe\u0100")
        buf.write(u"\t\2\2\2\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2\2\2\u0100")
        buf.write(u"\u0101\3\2\2\2\u0101\u0102\5\n\6\2\u0102\t\3\2\2\2\u0103")
        buf.write(u"\u0104\5\u00b4[\2\u0104\13\3\2\2\2\u0105\u0109\5\16\b")
        buf.write(u"\2\u0106\u0109\5\26\f\2\u0107\u0109\5 \21\2\u0108\u0105")
        buf.write(u"\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0107\3\2\2\2\u0109")
        buf.write(u"\r\3\2\2\2\u010a\u0116\7\22\2\2\u010b\u0117\5\20\t\2")
        buf.write(u"\u010c\u0112\7\36\2\2\u010d\u010e\5\20\t\2\u010e\u010f")
        buf.write(u"\5\u00c6d\2\u010f\u0111\3\2\2\2\u0110\u010d\3\2\2\2\u0111")
        buf.write(u"\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2")
        buf.write(u"\2\u0113\u0115\3\2\2\2\u0114\u0112\3\2\2\2\u0115\u0117")
        buf.write(u"\7\37\2\2\u0116\u010b\3\2\2\2\u0116\u010c\3\2\2\2\u0117")
        buf.write(u"\17\3\2\2\2\u0118\u011e\5\22\n\2\u0119\u011b\5l\67\2")
        buf.write(u"\u011a\u0119\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c")
        buf.write(u"\3\2\2\2\u011c\u011d\7$\2\2\u011d\u011f\5\24\13\2\u011e")
        buf.write(u"\u011a\3\2\2\2\u011e\u011f\3\2\2\2\u011f\21\3\2\2\2\u0120")
        buf.write(u"\u0125\7\35\2\2\u0121\u0122\7%\2\2\u0122\u0124\7\35\2")
        buf.write(u"\2\u0123\u0121\3\2\2\2\u0124\u0127\3\2\2\2\u0125\u0123")
        buf.write(u"\3\2\2\2\u0125\u0126\3\2\2\2\u0126\23\3\2\2\2\u0127\u0125")
        buf.write(u"\3\2\2\2\u0128\u012d\5\u008eH\2\u0129\u012a\7%\2\2\u012a")
        buf.write(u"\u012c\5\u008eH\2\u012b\u0129\3\2\2\2\u012c\u012f\3\2")
        buf.write(u"\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\25")
        buf.write(u"\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u013c\7\26\2\2\u0131")
        buf.write(u"\u013d\5\30\r\2\u0132\u0138\7\36\2\2\u0133\u0134\5\30")
        buf.write(u"\r\2\u0134\u0135\5\u00c6d\2\u0135\u0137\3\2\2\2\u0136")
        buf.write(u"\u0133\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2")
        buf.write(u"\2\u0138\u0139\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138")
        buf.write(u"\3\2\2\2\u013b\u013d\7\37\2\2\u013c\u0131\3\2\2\2\u013c")
        buf.write(u"\u0132\3\2\2\2\u013d\27\3\2\2\2\u013e\u0140\7\35\2\2")
        buf.write(u"\u013f\u0141\7$\2\2\u0140\u013f\3\2\2\2\u0140\u0141\3")
        buf.write(u"\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\5l\67\2\u0143")
        buf.write(u"\31\3\2\2\2\u0144\u0145\7\5\2\2\u0145\u0146\7\35\2\2")
        buf.write(u"\u0146\u0148\5\u0086D\2\u0147\u0149\5$\23\2\u0148\u0147")
        buf.write(u"\3\2\2\2\u0148\u0149\3\2\2\2\u0149\33\3\2\2\2\u014a\u014b")
        buf.write(u"\7\5\2\2\u014b\u014c\5\36\20\2\u014c\u014d\7\35\2\2\u014d")
        buf.write(u"\u014f\5\u0086D\2\u014e\u0150\5$\23\2\u014f\u014e\3\2")
        buf.write(u"\2\2\u014f\u0150\3\2\2\2\u0150\35\3\2\2\2\u0151\u0152")
        buf.write(u"\5\u008aF\2\u0152\37\3\2\2\2\u0153\u015f\7\33\2\2\u0154")
        buf.write(u"\u0160\5\"\22\2\u0155\u015b\7\36\2\2\u0156\u0157\5\"")
        buf.write(u"\22\2\u0157\u0158\5\u00c6d\2\u0158\u015a\3\2\2\2\u0159")
        buf.write(u"\u0156\3\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2")
        buf.write(u"\2\u015b\u015c\3\2\2\2\u015c\u015e\3\2\2\2\u015d\u015b")
        buf.write(u"\3\2\2\2\u015e\u0160\7\37\2\2\u015f\u0154\3\2\2\2\u015f")
        buf.write(u"\u0155\3\2\2\2\u0160!\3\2\2\2\u0161\u0169\5\22\n\2\u0162")
        buf.write(u"\u0165\5l\67\2\u0163\u0164\7$\2\2\u0164\u0166\5\24\13")
        buf.write(u"\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u016a")
        buf.write(u"\3\2\2\2\u0167\u0168\7$\2\2\u0168\u016a\5\24\13\2\u0169")
        buf.write(u"\u0162\3\2\2\2\u0169\u0167\3\2\2\2\u016a#\3\2\2\2\u016b")
        buf.write(u"\u016d\7 \2\2\u016c\u016e\5&\24\2\u016d\u016c\3\2\2\2")
        buf.write(u"\u016d\u016e\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170")
        buf.write(u"\7!\2\2\u0170%\3\2\2\2\u0171\u0172\5(\25\2\u0172\u0173")
        buf.write(u"\5\u00c6d\2\u0173\u0175\3\2\2\2\u0174\u0171\3\2\2\2\u0175")
        buf.write(u"\u0176\3\2\2\2\u0176\u0174\3\2\2\2\u0176\u0177\3\2\2")
        buf.write(u"\2\u0177\'\3\2\2\2\u0178\u01a8\5\f\7\2\u0179\u017a\7")
        buf.write(u"\35\2\2\u017a\u01a8\5\u00c0a\2\u017b\u0180\7\35\2\2\u017c")
        buf.write(u"\u017d\7%\2\2\u017d\u017f\7\35\2\2\u017e\u017c\3\2\2")
        buf.write(u"\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181")
        buf.write(u"\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183")
        buf.write(u"\u0186\t\3\2\2\u0184\u0185\7\35\2\2\u0185\u0187\7(\2")
        buf.write(u"\2\u0186\u0184\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0186")
        buf.write(u"\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write(u"\u018b\7\35\2\2\u018b\u01a8\5\u00c0a\2\u018c\u0191\7")
        buf.write(u"\35\2\2\u018d\u018e\7%\2\2\u018e\u0190\7\35\2\2\u018f")
        buf.write(u"\u018d\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2")
        buf.write(u"\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0191")
        buf.write(u"\3\2\2\2\u0194\u0195\t\3\2\2\u0195\u0196\7\35\2\2\u0196")
        buf.write(u"\u01a8\5\u00c0a\2\u0197\u0198\7\35\2\2\u0198\u019a\7")
        buf.write(u"(\2\2\u0199\u0197\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u0199")
        buf.write(u"\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019d\3\2\2\2\u019d")
        buf.write(u"\u019e\7\35\2\2\u019e\u01a8\5\u00c0a\2\u019f\u01a8\5")
        buf.write(u":\36\2\u01a0\u01a8\5*\26\2\u01a1\u01a8\5j\66\2\u01a2")
        buf.write(u"\u01a8\5<\37\2\u01a3\u01a8\5$\23\2\u01a4\u01a8\5H%\2")
        buf.write(u"\u01a5\u01a8\5d\63\2\u01a6\u01a8\5F$\2\u01a7\u0178\3")
        buf.write(u"\2\2\2\u01a7\u0179\3\2\2\2\u01a7\u017b\3\2\2\2\u01a7")
        buf.write(u"\u018c\3\2\2\2\u01a7\u0199\3\2\2\2\u01a7\u019f\3\2\2")
        buf.write(u"\2\u01a7\u01a0\3\2\2\2\u01a7\u01a1\3\2\2\2\u01a7\u01a2")
        buf.write(u"\3\2\2\2\u01a7\u01a3\3\2\2\2\u01a7\u01a4\3\2\2\2\u01a7")
        buf.write(u"\u01a5\3\2\2\2\u01a7\u01a6\3\2\2\2\u01a8)\3\2\2\2\u01a9")
        buf.write(u"\u01af\5.\30\2\u01aa\u01af\5\60\31\2\u01ab\u01af\5\62")
        buf.write(u"\32\2\u01ac\u01af\5\66\34\2\u01ad\u01af\58\35\2\u01ae")
        buf.write(u"\u01a9\3\2\2\2\u01ae\u01aa\3\2\2\2\u01ae\u01ab\3\2\2")
        buf.write(u"\2\u01ae\u01ac\3\2\2\2\u01ae\u01ad\3\2\2\2\u01af+\3\2")
        buf.write(u"\2\2\u01b0\u01b1\5\u008eH\2\u01b1-\3\2\2\2\u01b2\u01b3")
        buf.write(u"\5\u008eH\2\u01b3\u01b4\7A\2\2\u01b4\u01b5\5\u008eH\2")
        buf.write(u"\u01b5/\3\2\2\2\u01b6\u01b7\5\u008eH\2\u01b7\u01b8\t")
        buf.write(u"\4\2\2\u01b8\61\3\2\2\2\u01b9\u01ba\5\24\13\2\u01ba\u01bb")
        buf.write(u"\5\64\33\2\u01bb\u01bc\5\24\13\2\u01bc\63\3\2\2\2\u01bd")
        buf.write(u"\u01bf\t\5\2\2\u01be\u01bd\3\2\2\2\u01be\u01bf\3\2\2")
        buf.write(u"\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\7$\2\2\u01c1\65\3")
        buf.write(u"\2\2\2\u01c2\u01c3\5\22\n\2\u01c3\u01c4\7+\2\2\u01c4")
        buf.write(u"\u01c5\5\24\13\2\u01c5\67\3\2\2\2\u01c6\u01c7\7&\2\2")
        buf.write(u"\u01c79\3\2\2\2\u01c8\u01c9\7\35\2\2\u01c9\u01ca\7\'")
        buf.write(u"\2\2\u01ca\u01cb\5(\25\2\u01cb;\3\2\2\2\u01cc\u01ce\7")
        buf.write(u"\32\2\2\u01cd\u01cf\5\24\13\2\u01ce\u01cd\3\2\2\2\u01ce")
        buf.write(u"\u01cf\3\2\2\2\u01cf=\3\2\2\2\u01d0\u01d2\7\3\2\2\u01d1")
        buf.write(u"\u01d3\7\35\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2")
        buf.write(u"\2\u01d3?\3\2\2\2\u01d4\u01d6\7\27\2\2\u01d5\u01d7\7")
        buf.write(u"\35\2\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7")
        buf.write(u"A\3\2\2\2\u01d8\u01d9\7\17\2\2\u01d9\u01da\7\35\2\2\u01da")
        buf.write(u"C\3\2\2\2\u01db\u01dc\7\23\2\2\u01dcE\3\2\2\2\u01dd\u01de")
        buf.write(u"\7\t\2\2\u01de\u01e8\5\u008eH\2\u01df\u01e0\7\t\2\2\u01e0")
        buf.write(u"\u01e1\5\u009eP\2\u01e1\u01e2\5\u00c0a\2\u01e2\u01e8")
        buf.write(u"\3\2\2\2\u01e3\u01e4\7\t\2\2\u01e4\u01e5\5\u00c2b\2\u01e5")
        buf.write(u"\u01e6\5\u00c0a\2\u01e6\u01e8\3\2\2\2\u01e7\u01dd\3\2")
        buf.write(u"\2\2\u01e7\u01df\3\2\2\2\u01e7\u01e3\3\2\2\2\u01e8G\3")
        buf.write(u"\2\2\2\u01e9\u01ed\7\24\2\2\u01ea\u01eb\5*\26\2\u01eb")
        buf.write(u"\u01ec\7&\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ea\3\2\2\2")
        buf.write(u"\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0")
        buf.write(u"\5\u008eH\2\u01f0\u01f6\5$\23\2\u01f1\u01f4\7\16\2\2")
        buf.write(u"\u01f2\u01f5\5H%\2\u01f3\u01f5\5$\23\2\u01f4\u01f2\3")
        buf.write(u"\2\2\2\u01f4\u01f3\3\2\2\2\u01f5\u01f7\3\2\2\2\u01f6")
        buf.write(u"\u01f1\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7I\3\2\2\2\u01f8")
        buf.write(u"\u01fb\5L\'\2\u01f9\u01fb\5R*\2\u01fa\u01f8\3\2\2\2\u01fa")
        buf.write(u"\u01f9\3\2\2\2\u01fbK\3\2\2\2\u01fc\u0200\7\21\2\2\u01fd")
        buf.write(u"\u01fe\5*\26\2\u01fe\u01ff\7&\2\2\u01ff\u0201\3\2\2\2")
        buf.write(u"\u0200\u01fd\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0203")
        buf.write(u"\3\2\2\2\u0202\u0204\5\u008eH\2\u0203\u0202\3\2\2\2\u0203")
        buf.write(u"\u0204\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0209\7 \2\2")
        buf.write(u"\u0206\u0208\5N(\2\u0207\u0206\3\2\2\2\u0208\u020b\3")
        buf.write(u"\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a")
        buf.write(u"\u020c\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u020d\7!\2\2")
        buf.write(u"\u020dM\3\2\2\2\u020e\u020f\5P)\2\u020f\u0211\7\'\2\2")
        buf.write(u"\u0210\u0212\5&\24\2\u0211\u0210\3\2\2\2\u0211\u0212")
        buf.write(u"\3\2\2\2\u0212O\3\2\2\2\u0213\u0214\7\b\2\2\u0214\u0217")
        buf.write(u"\5\24\13\2\u0215\u0217\7\4\2\2\u0216\u0213\3\2\2\2\u0216")
        buf.write(u"\u0215\3\2\2\2\u0217Q\3\2\2\2\u0218\u021c\7\21\2\2\u0219")
        buf.write(u"\u021a\5*\26\2\u021a\u021b\7&\2\2\u021b\u021d\3\2\2\2")
        buf.write(u"\u021c\u0219\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e")
        buf.write(u"\3\2\2\2\u021e\u021f\5T+\2\u021f\u0223\7 \2\2\u0220\u0222")
        buf.write(u"\5V,\2\u0221\u0220\3\2\2\2\u0222\u0225\3\2\2\2\u0223")
        buf.write(u"\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3\2\2")
        buf.write(u"\2\u0225\u0223\3\2\2\2\u0226\u0227\7!\2\2\u0227S\3\2")
        buf.write(u"\2\2\u0228\u0229\7\35\2\2\u0229\u022b\7+\2\2\u022a\u0228")
        buf.write(u"\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\3\2\2\2\u022c")
        buf.write(u"\u022d\5\u0090I\2\u022d\u022e\7(\2\2\u022e\u022f\7\36")
        buf.write(u"\2\2\u022f\u0230\7\26\2\2\u0230\u0231\7\37\2\2\u0231")
        buf.write(u"U\3\2\2\2\u0232\u0233\5X-\2\u0233\u0235\7\'\2\2\u0234")
        buf.write(u"\u0236\5&\24\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2")
        buf.write(u"\2\u0236W\3\2\2\2\u0237\u0238\7\b\2\2\u0238\u023b\5Z")
        buf.write(u".\2\u0239\u023b\7\4\2\2\u023a\u0237\3\2\2\2\u023a\u0239")
        buf.write(u"\3\2\2\2\u023bY\3\2\2\2\u023c\u023f\5l\67\2\u023d\u023f")
        buf.write(u"\7\34\2\2\u023e\u023c\3\2\2\2\u023e\u023d\3\2\2\2\u023f")
        buf.write(u"\u0247\3\2\2\2\u0240\u0243\7%\2\2\u0241\u0244\5l\67\2")
        buf.write(u"\u0242\u0244\7\34\2\2\u0243\u0241\3\2\2\2\u0243\u0242")
        buf.write(u"\3\2\2\2\u0244\u0246\3\2\2\2\u0245\u0240\3\2\2\2\u0246")
        buf.write(u"\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2")
        buf.write(u"\2\u0248[\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024b\7\7")
        buf.write(u"\2\2\u024b\u024f\7 \2\2\u024c\u024e\5^\60\2\u024d\u024c")
        buf.write(u"\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f")
        buf.write(u"\u0250\3\2\2\2\u0250\u0252\3\2\2\2\u0251\u024f\3\2\2")
        buf.write(u"\2\u0252\u0253\7!\2\2\u0253]\3\2\2\2\u0254\u0255\5`\61")
        buf.write(u"\2\u0255\u0257\7\'\2\2\u0256\u0258\5&\24\2\u0257\u0256")
        buf.write(u"\3\2\2\2\u0257\u0258\3\2\2\2\u0258_\3\2\2\2\u0259\u025c")
        buf.write(u"\7\b\2\2\u025a\u025d\5.\30\2\u025b\u025d\5b\62\2\u025c")
        buf.write(u"\u025a\3\2\2\2\u025c\u025b\3\2\2\2\u025d\u0260\3\2\2")
        buf.write(u"\2\u025e\u0260\7\4\2\2\u025f\u0259\3\2\2\2\u025f\u025e")
        buf.write(u"\3\2\2\2\u0260a\3\2\2\2\u0261\u0262\5\24\13\2\u0262\u0263")
        buf.write(u"\7$\2\2\u0263\u0268\3\2\2\2\u0264\u0265\5\22\n\2\u0265")
        buf.write(u"\u0266\7+\2\2\u0266\u0268\3\2\2\2\u0267\u0261\3\2\2\2")
        buf.write(u"\u0267\u0264\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269")
        buf.write(u"\3\2\2\2\u0269\u026a\5\u008eH\2\u026ac\3\2\2\2\u026b")
        buf.write(u"\u026f\7\30\2\2\u026c\u0270\5\u008eH\2\u026d\u0270\5")
        buf.write(u"f\64\2\u026e\u0270\5h\65\2\u026f\u026c\3\2\2\2\u026f")
        buf.write(u"\u026d\3\2\2\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2\2")
        buf.write(u"\2\u0270\u0271\3\2\2\2\u0271\u0272\5$\23\2\u0272e\3\2")
        buf.write(u"\2\2\u0273\u0275\5*\26\2\u0274\u0273\3\2\2\2\u0274\u0275")
        buf.write(u"\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0278\7&\2\2\u0277")
        buf.write(u"\u0279\5\u008eH\2\u0278\u0277\3\2\2\2\u0278\u0279\3\2")
        buf.write(u"\2\2\u0279\u027a\3\2\2\2\u027a\u027c\7&\2\2\u027b\u027d")
        buf.write(u"\5*\26\2\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d")
        buf.write(u"g\3\2\2\2\u027e\u027f\5\24\13\2\u027f\u0280\7$\2\2\u0280")
        buf.write(u"\u0285\3\2\2\2\u0281\u0282\5\22\n\2\u0282\u0283\7+\2")
        buf.write(u"\2\u0283\u0285\3\2\2\2\u0284\u027e\3\2\2\2\u0284\u0281")
        buf.write(u"\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write(u"\u0287\7\25\2\2\u0287\u0288\5\u008eH\2\u0288i\3\2\2\2")
        buf.write(u"\u0289\u028a\7\n\2\2\u028a\u028b\5\u008eH\2\u028bk\3")
        buf.write(u"\2\2\2\u028c\u0293\5n8\2\u028d\u0293\5p9\2\u028e\u028f")
        buf.write(u"\7\36\2\2\u028f\u0290\5l\67\2\u0290\u0291\7\37\2\2\u0291")
        buf.write(u"\u0293\3\2\2\2\u0292\u028c\3\2\2\2\u0292\u028d\3\2\2")
        buf.write(u"\2\u0292\u028e\3\2\2\2\u0293m\3\2\2\2\u0294\u0297\7\35")
        buf.write(u"\2\2\u0295\u0297\5\u00a0Q\2\u0296\u0294\3\2\2\2\u0296")
        buf.write(u"\u0295\3\2\2\2\u0297o\3\2\2\2\u0298\u02a1\5r:\2\u0299")
        buf.write(u"\u02a1\5\u00b0Y\2\u029a\u02a1\5x=\2\u029b\u02a1\5\u0084")
        buf.write(u"C\2\u029c\u02a1\5z>\2\u029d\u02a1\5|?\2\u029e\u02a1\5")
        buf.write(u"~@\2\u029f\u02a1\5\u0080A\2\u02a0\u0298\3\2\2\2\u02a0")
        buf.write(u"\u0299\3\2\2\2\u02a0\u029a\3\2\2\2\u02a0\u029b\3\2\2")
        buf.write(u"\2\u02a0\u029c\3\2\2\2\u02a0\u029d\3\2\2\2\u02a0\u029e")
        buf.write(u"\3\2\2\2\u02a0\u029f\3\2\2\2\u02a1q\3\2\2\2\u02a2\u02a3")
        buf.write(u"\7\"\2\2\u02a3\u02a4\5t;\2\u02a4\u02a5\7#\2\2\u02a5\u02a6")
        buf.write(u"\5v<\2\u02a6s\3\2\2\2\u02a7\u02a8\5\u008eH\2\u02a8u\3")
        buf.write(u"\2\2\2\u02a9\u02aa\5l\67\2\u02aaw\3\2\2\2\u02ab\u02ac")
        buf.write(u"\7?\2\2\u02ac\u02ad\5l\67\2\u02ady\3\2\2\2\u02ae\u02af")
        buf.write(u"\7\6\2\2\u02af\u02b5\7 \2\2\u02b0\u02b1\5\u0082B\2\u02b1")
        buf.write(u"\u02b2\5\u00c6d\2\u02b2\u02b4\3\2\2\2\u02b3\u02b0\3\2")
        buf.write(u"\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6")
        buf.write(u"\3\2\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b8")
        buf.write(u"\u02b9\7!\2\2\u02b9{\3\2\2\2\u02ba\u02bb\7\"\2\2\u02bb")
        buf.write(u"\u02bc\7#\2\2\u02bc\u02bd\5v<\2\u02bd}\3\2\2\2\u02be")
        buf.write(u"\u02bf\7\13\2\2\u02bf\u02c0\7\"\2\2\u02c0\u02c1\5l\67")
        buf.write(u"\2\u02c1\u02c2\7#\2\2\u02c2\u02c3\5v<\2\u02c3\177\3\2")
        buf.write(u"\2\2\u02c4\u02ca\7\r\2\2\u02c5\u02c6\7\r\2\2\u02c6\u02ca")
        buf.write(u"\7A\2\2\u02c7\u02c8\7A\2\2\u02c8\u02ca\7\r\2\2\u02c9")
        buf.write(u"\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2\u02c9\u02c7\3\2\2")
        buf.write(u"\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\5v<\2\u02cc\u0081")
        buf.write(u"\3\2\2\2\u02cd\u02d5\5n8\2\u02ce\u02cf\7\35\2\2\u02cf")
        buf.write(u"\u02d5\5\u008aF\2\u02d0\u02d1\7\35\2\2\u02d1\u02d2\5")
        buf.write(u"\u008aF\2\u02d2\u02d3\5\u0088E\2\u02d3\u02d5\3\2\2\2")
        buf.write(u"\u02d4\u02cd\3\2\2\2\u02d4\u02ce\3\2\2\2\u02d4\u02d0")
        buf.write(u"\3\2\2\2\u02d5\u0083\3\2\2\2\u02d6\u02d7\7\5\2\2\u02d7")
        buf.write(u"\u02d8\5\u0086D\2\u02d8\u0085\3\2\2\2\u02d9\u02da\5\u008a")
        buf.write(u"F\2\u02da\u02db\5\u0088E\2\u02db\u02de\3\2\2\2\u02dc")
        buf.write(u"\u02de\5\u008aF\2\u02dd\u02d9\3\2\2\2\u02dd\u02dc\3\2")
        buf.write(u"\2\2\u02de\u0087\3\2\2\2\u02df\u02e2\5\u008aF\2\u02e0")
        buf.write(u"\u02e2\5l\67\2\u02e1\u02df\3\2\2\2\u02e1\u02e0\3\2\2")
        buf.write(u"\2\u02e2\u0089\3\2\2\2\u02e3\u02ef\7\36\2\2\u02e4\u02e9")
        buf.write(u"\5\u008cG\2\u02e5\u02e6\7%\2\2\u02e6\u02e8\5\u008cG\2")
        buf.write(u"\u02e7\u02e5\3\2\2\2\u02e8\u02eb\3\2\2\2\u02e9\u02e7")
        buf.write(u"\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb")
        buf.write(u"\u02e9\3\2\2\2\u02ec\u02ee\7%\2\2\u02ed\u02ec\3\2\2\2")
        buf.write(u"\u02ed\u02ee\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02e4")
        buf.write(u"\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1")
        buf.write(u"\u02f2\7\37\2\2\u02f2\u008b\3\2\2\2\u02f3\u02f5\5\22")
        buf.write(u"\n\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7")
        buf.write(u"\3\2\2\2\u02f6\u02f8\7,\2\2\u02f7\u02f6\3\2\2\2\u02f7")
        buf.write(u"\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\5l\67")
        buf.write(u"\2\u02fa\u008d\3\2\2\2\u02fb\u02fc\bH\1\2\u02fc\u02ff")
        buf.write(u"\5\u0090I\2\u02fd\u02ff\5\u0092J\2\u02fe\u02fb\3\2\2")
        buf.write(u"\2\u02fe\u02fd\3\2\2\2\u02ff\u0311\3\2\2\2\u0300\u0301")
        buf.write(u"\f\7\2\2\u0301\u0302\t\6\2\2\u0302\u0310\5\u008eH\b\u0303")
        buf.write(u"\u0304\f\6\2\2\u0304\u0305\t\7\2\2\u0305\u0310\5\u008e")
        buf.write(u"H\7\u0306\u0307\f\5\2\2\u0307\u0308\t\b\2\2\u0308\u0310")
        buf.write(u"\5\u008eH\6\u0309\u030a\f\4\2\2\u030a\u030b\7.\2\2\u030b")
        buf.write(u"\u0310\5\u008eH\5\u030c\u030d\f\3\2\2\u030d\u030e\7-")
        buf.write(u"\2\2\u030e\u0310\5\u008eH\4\u030f\u0300\3\2\2\2\u030f")
        buf.write(u"\u0303\3\2\2\2\u030f\u0306\3\2\2\2\u030f\u0309\3\2\2")
        buf.write(u"\2\u030f\u030c\3\2\2\2\u0310\u0313\3\2\2\2\u0311\u030f")
        buf.write(u"\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u008f\3\2\2\2\u0313")
        buf.write(u"\u0311\3\2\2\2\u0314\u0315\bI\1\2\u0315\u0318\5\u0096")
        buf.write(u"L\2\u0316\u0318\5\u0094K\2\u0317\u0314\3\2\2\2\u0317")
        buf.write(u"\u0316\3\2\2\2\u0318\u0323\3\2\2\2\u0319\u031f\f\3\2")
        buf.write(u"\2\u031a\u031b\7(\2\2\u031b\u0320\7\35\2\2\u031c\u0320")
        buf.write(u"\5\u00ba^\2\u031d\u0320\5\u00bc_\2\u031e\u0320\5\u00be")
        buf.write(u"`\2\u031f\u031a\3\2\2\2\u031f\u031c\3\2\2\2\u031f\u031d")
        buf.write(u"\3\2\2\2\u031f\u031e\3\2\2\2\u0320\u0322\3\2\2\2\u0321")
        buf.write(u"\u0319\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2")
        buf.write(u"\2\u0323\u0324\3\2\2\2\u0324\u0091\3\2\2\2\u0325\u0323")
        buf.write(u"\3\2\2\2\u0326\u032a\5\u0090I\2\u0327\u0328\t\t\2\2\u0328")
        buf.write(u"\u032a\5\u008eH\2\u0329\u0326\3\2\2\2\u0329\u0327\3\2")
        buf.write(u"\2\2\u032a\u0093\3\2\2\2\u032b\u032c\5l\67\2\u032c\u032d")
        buf.write(u"\7\36\2\2\u032d\u032f\5\u008eH\2\u032e\u0330\7%\2\2\u032f")
        buf.write(u"\u032e\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\3\2\2")
        buf.write(u"\2\u0331\u0332\7\37\2\2\u0332\u0095\3\2\2\2\u0333\u033a")
        buf.write(u"\5\u0098M\2\u0334\u033a\5\u009eP\2\u0335\u0336\7\36\2")
        buf.write(u"\2\u0336\u0337\5\u008eH\2\u0337\u0338\7\37\2\2\u0338")
        buf.write(u"\u033a\3\2\2\2\u0339\u0333\3\2\2\2\u0339\u0334\3\2\2")
        buf.write(u"\2\u0339\u0335\3\2\2\2\u033a\u0097\3\2\2\2\u033b\u033f")
        buf.write(u"\5\u009aN\2\u033c\u033f\5\u00a2R\2\u033d\u033f\5\u00b8")
        buf.write(u"]\2\u033e\u033b\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033d")
        buf.write(u"\3\2\2\2\u033f\u0099\3\2\2\2\u0340\u0347\7\34\2\2\u0341")
        buf.write(u"\u0347\5\u009cO\2\u0342\u0347\5\u00b4[\2\u0343\u0347")
        buf.write(u"\7E\2\2\u0344\u0347\7F\2\2\u0345\u0347\7G\2\2\u0346\u0340")
        buf.write(u"\3\2\2\2\u0346\u0341\3\2\2\2\u0346\u0342\3\2\2\2\u0346")
        buf.write(u"\u0343\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0345\3\2\2")
        buf.write(u"\2\u0347\u009b\3\2\2\2\u0348\u0349\t\n\2\2\u0349\u009d")
        buf.write(u"\3\2\2\2\u034a\u034d\7\35\2\2\u034b\u034d\5\u00a0Q\2")
        buf.write(u"\u034c\u034a\3\2\2\2\u034c\u034b\3\2\2\2\u034d\u009f")
        buf.write(u"\3\2\2\2\u034e\u034f\7\35\2\2\u034f\u0350\7(\2\2\u0350")
        buf.write(u"\u0351\7\35\2\2\u0351\u00a1\3\2\2\2\u0352\u0353\5\u00a4")
        buf.write(u"S\2\u0353\u0354\5\u00a6T\2\u0354\u00a3\3\2\2\2\u0355")
        buf.write(u"\u035f\5\u00b0Y\2\u0356\u035f\5r:\2\u0357\u0358\7\"\2")
        buf.write(u"\2\u0358\u0359\7,\2\2\u0359\u035a\7#\2\2\u035a\u035f")
        buf.write(u"\5v<\2\u035b\u035f\5|?\2\u035c\u035f\5~@\2\u035d\u035f")
        buf.write(u"\5n8\2\u035e\u0355\3\2\2\2\u035e\u0356\3\2\2\2\u035e")
        buf.write(u"\u0357\3\2\2\2\u035e\u035b\3\2\2\2\u035e\u035c\3\2\2")
        buf.write(u"\2\u035e\u035d\3\2\2\2\u035f\u00a5\3\2\2\2\u0360\u0365")
        buf.write(u"\7 \2\2\u0361\u0363\5\u00a8U\2\u0362\u0364\7%\2\2\u0363")
        buf.write(u"\u0362\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0366\3\2\2")
        buf.write(u"\2\u0365\u0361\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367")
        buf.write(u"\3\2\2\2\u0367\u0368\7!\2\2\u0368\u00a7\3\2\2\2\u0369")
        buf.write(u"\u036e\5\u00aaV\2\u036a\u036b\7%\2\2\u036b\u036d\5\u00aa")
        buf.write(u"V\2\u036c\u036a\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c")
        buf.write(u"\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u00a9\3\2\2\2\u0370")
        buf.write(u"\u036e\3\2\2\2\u0371\u0372\5\u00acW\2\u0372\u0373\7\'")
        buf.write(u"\2\2\u0373\u0375\3\2\2\2\u0374\u0371\3\2\2\2\u0374\u0375")
        buf.write(u"\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0377\5\u00aeX\2\u0377")
        buf.write(u"\u00ab\3\2\2\2\u0378\u037c\7\35\2\2\u0379\u037c\5\u008e")
        buf.write(u"H\2\u037a\u037c\5\u00a6T\2\u037b\u0378\3\2\2\2\u037b")
        buf.write(u"\u0379\3\2\2\2\u037b\u037a\3\2\2\2\u037c\u00ad\3\2\2")
        buf.write(u"\2\u037d\u0380\5\u008eH\2\u037e\u0380\5\u00a6T\2\u037f")
        buf.write(u"\u037d\3\2\2\2\u037f\u037e\3\2\2\2\u0380\u00af\3\2\2")
        buf.write(u"\2\u0381\u0382\7\f\2\2\u0382\u0388\7 \2\2\u0383\u0384")
        buf.write(u"\5\u00b2Z\2\u0384\u0385\5\u00c6d\2\u0385\u0387\3\2\2")
        buf.write(u"\2\u0386\u0383\3\2\2\2\u0387\u038a\3\2\2\2\u0388\u0386")
        buf.write(u"\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038b\3\2\2\2\u038a")
        buf.write(u"\u0388\3\2\2\2\u038b\u038c\7!\2\2\u038c\u00b1\3\2\2\2")
        buf.write(u"\u038d\u038e\6Z\b\2\u038e\u038f\5\22\n\2\u038f\u0390")
        buf.write(u"\5l\67\2\u0390\u0393\3\2\2\2\u0391\u0393\5\u00b6\\\2")
        buf.write(u"\u0392\u038d\3\2\2\2\u0392\u0391\3\2\2\2\u0393\u0395")
        buf.write(u"\3\2\2\2\u0394\u0396\5\u00b4[\2\u0395\u0394\3\2\2\2\u0395")
        buf.write(u"\u0396\3\2\2\2\u0396\u00b3\3\2\2\2\u0397\u0398\t\13\2")
        buf.write(u"\2\u0398\u00b5\3\2\2\2\u0399\u039b\7?\2\2\u039a\u0399")
        buf.write(u"\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write(u"\u039d\5n8\2\u039d\u00b7\3\2\2\2\u039e\u039f\7\5\2\2")
        buf.write(u"\u039f\u03a0\5\u0086D\2\u03a0\u03a1\5$\23\2\u03a1\u00b9")
        buf.write(u"\3\2\2\2\u03a2\u03a3\7\"\2\2\u03a3\u03a4\5\u008eH\2\u03a4")
        buf.write(u"\u03a5\7#\2\2\u03a5\u00bb\3\2\2\2\u03a6\u03b6\7\"\2\2")
        buf.write(u"\u03a7\u03a9\5\u008eH\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9")
        buf.write(u"\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\7\'\2\2\u03ab")
        buf.write(u"\u03ad\5\u008eH\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad\3\2")
        buf.write(u"\2\2\u03ad\u03b7\3\2\2\2\u03ae\u03b0\5\u008eH\2\u03af")
        buf.write(u"\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2")
        buf.write(u"\2\u03b1\u03b2\7\'\2\2\u03b2\u03b3\5\u008eH\2\u03b3\u03b4")
        buf.write(u"\7\'\2\2\u03b4\u03b5\5\u008eH\2\u03b5\u03b7\3\2\2\2\u03b6")
        buf.write(u"\u03a8\3\2\2\2\u03b6\u03af\3\2\2\2\u03b7\u03b8\3\2\2")
        buf.write(u"\2\u03b8\u03b9\7#\2\2\u03b9\u00bd\3\2\2\2\u03ba\u03bb")
        buf.write(u"\7(\2\2\u03bb\u03bc\7\36\2\2\u03bc\u03bd\5l\67\2\u03bd")
        buf.write(u"\u03be\7\37\2\2\u03be\u00bf\3\2\2\2\u03bf\u03ce\7\36")
        buf.write(u"\2\2\u03c0\u03c7\5\24\13\2\u03c1\u03c4\5l\67\2\u03c2")
        buf.write(u"\u03c3\7%\2\2\u03c3\u03c5\5\24\13\2\u03c4\u03c2\3\2\2")
        buf.write(u"\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03c0")
        buf.write(u"\3\2\2\2\u03c6\u03c1\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8")
        buf.write(u"\u03ca\7,\2\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2\2\2")
        buf.write(u"\u03ca\u03cc\3\2\2\2\u03cb\u03cd\7%\2\2\u03cc\u03cb\3")
        buf.write(u"\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cf\3\2\2\2\u03ce")
        buf.write(u"\u03c6\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\3\2\2")
        buf.write(u"\2\u03d0\u03d1\7\37\2\2\u03d1\u00c1\3\2\2\2\u03d2\u03d3")
        buf.write(u"\5\u00c4c\2\u03d3\u03d4\7(\2\2\u03d4\u03d6\3\2\2\2\u03d5")
        buf.write(u"\u03d2\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d5\3\2\2")
        buf.write(u"\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da")
        buf.write(u"\7\35\2\2\u03da\u00c3\3\2\2\2\u03db\u03e5\5n8\2\u03dc")
        buf.write(u"\u03e0\7\36\2\2\u03dd\u03de\7?\2\2\u03de\u03e1\5n8\2")
        buf.write(u"\u03df\u03e1\5\u00c4c\2\u03e0\u03dd\3\2\2\2\u03e0\u03df")
        buf.write(u"\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\7\37\2\2\u03e3")
        buf.write(u"\u03e5\3\2\2\2\u03e4\u03db\3\2\2\2\u03e4\u03dc\3\2\2")
        buf.write(u"\2\u03e5\u00c5\3\2\2\2\u03e6\u03ea\7&\2\2\u03e7\u03ea")
        buf.write(u"\7\2\2\3\u03e8\u03ea\6d\t\3\u03e9\u03e6\3\2\2\2\u03e9")
        buf.write(u"\u03e7\3\2\2\2\u03e9\u03e8\3\2\2\2\u03ea\u00c7\3\2\2")
        buf.write(u"\2s\u00cf\u00d5\u00db\u00e9\u00ed\u00f6\u00fc\u00ff\u0108")
        buf.write(u"\u0112\u0116\u011a\u011e\u0125\u012d\u0138\u013c\u0140")
        buf.write(u"\u0148\u014f\u015b\u015f\u0165\u0169\u016d\u0176\u0180")
        buf.write(u"\u0188\u0191\u019b\u01a7\u01ae\u01be\u01ce\u01d2\u01d6")
        buf.write(u"\u01e7\u01ed\u01f4\u01f6\u01fa\u0200\u0203\u0209\u0211")
        buf.write(u"\u0216\u021c\u0223\u022a\u0235\u023a\u023e\u0243\u0247")
        buf.write(u"\u024f\u0257\u025c\u025f\u0267\u026f\u0274\u0278\u027c")
        buf.write(u"\u0284\u0292\u0296\u02a0\u02b5\u02c9\u02d4\u02dd\u02e1")
        buf.write(u"\u02e9\u02ed\u02ef\u02f4\u02f7\u02fe\u030f\u0311\u0317")
        buf.write(u"\u031f\u0323\u0329\u032f\u0339\u033e\u0346\u034c\u035e")
        buf.write(u"\u0363\u0365\u036e\u0374\u037b\u037f\u0388\u0392\u0395")
        buf.write(u"\u039a\u03a8\u03ac\u03af\u03b6\u03c4\u03c6\u03c9\u03cc")
        buf.write(u"\u03ce\u03d7\u03e0\u03e4\u03e9")
        return buf.getvalue()


class GoLangParser ( Parser ):

    grammarFileName = "GoLang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'break'", u"'default'", u"'func'", 
                     u"'interface'", u"'select'", u"'case'", u"'defer'", 
                     u"'go'", u"'map'", u"'struct'", u"'chan'", u"'else'", 
                     u"'goto'", u"'package'", u"'switch'", u"'const'", u"'fallthrough'", 
                     u"'if'", u"'range'", u"'type'", u"'continue'", u"'for'", 
                     u"'import'", u"'return'", u"'var'", u"'nil'", u"<INVALID>", 
                     u"'('", u"')'", u"'{'", u"'}'", u"'['", u"']'", u"'='", 
                     u"','", u"';'", u"':'", u"'.'", u"'++'", u"'--'", u"':='", 
                     u"'...'", u"'||'", u"'&&'", u"'=='", u"'!='", u"'<'", 
                     u"'<='", u"'>'", u"'>='", u"'|'", u"'/'", u"'%'", u"'<<'", 
                     u"'>>'", u"'&^'", u"'!'", u"'+'", u"'-'", u"'^'", u"'*'", 
                     u"'&'", u"'<-'" ]

    symbolicNames = [ u"<INVALID>", u"BREAK", u"DEFAULT", u"FUNC", u"INTERFACE", 
                      u"SELECT", u"CASE", u"DEFER", u"GO", u"MAP", u"STRUCT", 
                      u"CHAN", u"ELSE", u"GOTO", u"PACKAGE", u"SWITCH", 
                      u"CONST", u"FALLTHROUGH", u"IF", u"RANGE", u"TYPE", 
                      u"CONTINUE", u"FOR", u"IMPORT", u"RETURN", u"VAR", 
                      u"NIL_LIT", u"IDENTIFIER", u"L_PAREN", u"R_PAREN", 
                      u"L_CURLY", u"R_CURLY", u"L_BRACKET", u"R_BRACKET", 
                      u"ASSIGN", u"COMMA", u"SEMI", u"COLON", u"DOT", u"PLUS_PLUS", 
                      u"MINUS_MINUS", u"DECLARE_ASSIGN", u"ELLIPSIS", u"LOGICAL_OR", 
                      u"LOGICAL_AND", u"EQUALS", u"NOT_EQUALS", u"LESS", 
                      u"LESS_OR_EQUALS", u"GREATER", u"GREATER_OR_EQUALS", 
                      u"OR", u"DIV", u"MOD", u"LSHIFT", u"RSHIFT", u"BIT_CLEAR", 
                      u"EXCLAMATION", u"PLUS", u"MINUS", u"CARET", u"STAR", 
                      u"AMPERSAND", u"RECEIVE", u"DECIMAL_LIT", u"OCTAL_LIT", 
                      u"HEX_LIT", u"FLOAT_LIT", u"IMAGINARY_LIT", u"RUNE_LIT", 
                      u"RAW_STRING_LIT", u"INTERPRETED_STRING_LIT", u"WS", 
                      u"COMMENT", u"TERMINATOR", u"LINE_COMMENT" ]

    RULE_sourceFile = 0
    RULE_packageClause = 1
    RULE_importDecl = 2
    RULE_importSpec = 3
    RULE_importPath = 4
    RULE_declaration = 5
    RULE_constDecl = 6
    RULE_constSpec = 7
    RULE_identifierList = 8
    RULE_expressionList = 9
    RULE_typeDecl = 10
    RULE_typeSpec = 11
    RULE_functionDecl = 12
    RULE_methodDecl = 13
    RULE_receiver = 14
    RULE_varDecl = 15
    RULE_varSpec = 16
    RULE_block = 17
    RULE_statementList = 18
    RULE_statement = 19
    RULE_simpleStmt = 20
    RULE_expressionStmt = 21
    RULE_sendStmt = 22
    RULE_incDecStmt = 23
    RULE_assignment = 24
    RULE_assign_op = 25
    RULE_shortVarDecl = 26
    RULE_emptyStmt = 27
    RULE_labeledStmt = 28
    RULE_returnStmt = 29
    RULE_breakStmt = 30
    RULE_continueStmt = 31
    RULE_gotoStmt = 32
    RULE_fallthroughStmt = 33
    RULE_deferStmt = 34
    RULE_ifStmt = 35
    RULE_switchStmt = 36
    RULE_exprSwitchStmt = 37
    RULE_exprCaseClause = 38
    RULE_exprSwitchCase = 39
    RULE_typeSwitchStmt = 40
    RULE_typeSwitchGuard = 41
    RULE_typeCaseClause = 42
    RULE_typeSwitchCase = 43
    RULE_typeList = 44
    RULE_selectStmt = 45
    RULE_commClause = 46
    RULE_commCase = 47
    RULE_recvStmt = 48
    RULE_forStmt = 49
    RULE_forClause = 50
    RULE_rangeClause = 51
    RULE_goStmt = 52
    RULE_type_ = 53
    RULE_typeName = 54
    RULE_typeLit = 55
    RULE_arrayType = 56
    RULE_arrayLength = 57
    RULE_elementType = 58
    RULE_pointerType = 59
    RULE_interfaceType = 60
    RULE_sliceType = 61
    RULE_mapType = 62
    RULE_channelType = 63
    RULE_methodSpec = 64
    RULE_functionType = 65
    RULE_signature = 66
    RULE_result = 67
    RULE_parameters = 68
    RULE_parameterDecl = 69
    RULE_expression = 70
    RULE_primaryExpr = 71
    RULE_unaryExpr = 72
    RULE_conversion = 73
    RULE_operand = 74
    RULE_literal = 75
    RULE_basicLit = 76
    RULE_integer = 77
    RULE_operandName = 78
    RULE_qualifiedIdent = 79
    RULE_compositeLit = 80
    RULE_literalType = 81
    RULE_literalValue = 82
    RULE_elementList = 83
    RULE_keyedElement = 84
    RULE_key = 85
    RULE_element = 86
    RULE_structType = 87
    RULE_fieldDecl = 88
    RULE_string_ = 89
    RULE_anonymousField = 90
    RULE_functionLit = 91
    RULE_index = 92
    RULE_goslice = 93
    RULE_typeAssertion = 94
    RULE_arguments = 95
    RULE_methodExpr = 96
    RULE_receiverType = 97
    RULE_eos = 98

    ruleNames =  [ u"sourceFile", u"packageClause", u"importDecl", u"importSpec", 
                   u"importPath", u"declaration", u"constDecl", u"constSpec", 
                   u"identifierList", u"expressionList", u"typeDecl", u"typeSpec", 
                   u"functionDecl", u"methodDecl", u"receiver", u"varDecl", 
                   u"varSpec", u"block", u"statementList", u"statement", 
                   u"simpleStmt", u"expressionStmt", u"sendStmt", u"incDecStmt", 
                   u"assignment", u"assign_op", u"shortVarDecl", u"emptyStmt", 
                   u"labeledStmt", u"returnStmt", u"breakStmt", u"continueStmt", 
                   u"gotoStmt", u"fallthroughStmt", u"deferStmt", u"ifStmt", 
                   u"switchStmt", u"exprSwitchStmt", u"exprCaseClause", 
                   u"exprSwitchCase", u"typeSwitchStmt", u"typeSwitchGuard", 
                   u"typeCaseClause", u"typeSwitchCase", u"typeList", u"selectStmt", 
                   u"commClause", u"commCase", u"recvStmt", u"forStmt", 
                   u"forClause", u"rangeClause", u"goStmt", u"type_", u"typeName", 
                   u"typeLit", u"arrayType", u"arrayLength", u"elementType", 
                   u"pointerType", u"interfaceType", u"sliceType", u"mapType", 
                   u"channelType", u"methodSpec", u"functionType", u"signature", 
                   u"result", u"parameters", u"parameterDecl", u"expression", 
                   u"primaryExpr", u"unaryExpr", u"conversion", u"operand", 
                   u"literal", u"basicLit", u"integer", u"operandName", 
                   u"qualifiedIdent", u"compositeLit", u"literalType", u"literalValue", 
                   u"elementList", u"keyedElement", u"key", u"element", 
                   u"structType", u"fieldDecl", u"string_", u"anonymousField", 
                   u"functionLit", u"index", u"goslice", u"typeAssertion", 
                   u"arguments", u"methodExpr", u"receiverType", u"eos" ]

    EOF = Token.EOF
    BREAK=1
    DEFAULT=2
    FUNC=3
    INTERFACE=4
    SELECT=5
    CASE=6
    DEFER=7
    GO=8
    MAP=9
    STRUCT=10
    CHAN=11
    ELSE=12
    GOTO=13
    PACKAGE=14
    SWITCH=15
    CONST=16
    FALLTHROUGH=17
    IF=18
    RANGE=19
    TYPE=20
    CONTINUE=21
    FOR=22
    IMPORT=23
    RETURN=24
    VAR=25
    NIL_LIT=26
    IDENTIFIER=27
    L_PAREN=28
    R_PAREN=29
    L_CURLY=30
    R_CURLY=31
    L_BRACKET=32
    R_BRACKET=33
    ASSIGN=34
    COMMA=35
    SEMI=36
    COLON=37
    DOT=38
    PLUS_PLUS=39
    MINUS_MINUS=40
    DECLARE_ASSIGN=41
    ELLIPSIS=42
    LOGICAL_OR=43
    LOGICAL_AND=44
    EQUALS=45
    NOT_EQUALS=46
    LESS=47
    LESS_OR_EQUALS=48
    GREATER=49
    GREATER_OR_EQUALS=50
    OR=51
    DIV=52
    MOD=53
    LSHIFT=54
    RSHIFT=55
    BIT_CLEAR=56
    EXCLAMATION=57
    PLUS=58
    MINUS=59
    CARET=60
    STAR=61
    AMPERSAND=62
    RECEIVE=63
    DECIMAL_LIT=64
    OCTAL_LIT=65
    HEX_LIT=66
    FLOAT_LIT=67
    IMAGINARY_LIT=68
    RUNE_LIT=69
    RAW_STRING_LIT=70
    INTERPRETED_STRING_LIT=71
    WS=72
    COMMENT=73
    TERMINATOR=74
    LINE_COMMENT=75

    def __init__(self, input, output=sys.stdout):
        super(GoLangParser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SourceFileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SourceFileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def packageClause(self):
            return self.getTypedRuleContext(GoLangParser.PackageClauseContext,0)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def importDecl(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ImportDeclContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ImportDeclContext,i)


        def functionDecl(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.FunctionDeclContext)
            else:
                return self.getTypedRuleContext(GoLangParser.FunctionDeclContext,i)


        def methodDecl(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.MethodDeclContext)
            else:
                return self.getTypedRuleContext(GoLangParser.MethodDeclContext,i)


        def declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(GoLangParser.DeclarationContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_sourceFile

        def enterRule(self, listener):
            if hasattr(listener, "enterSourceFile"):
                listener.enterSourceFile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSourceFile"):
                listener.exitSourceFile(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSourceFile"):
                return visitor.visitSourceFile(self)
            else:
                return visitor.visitChildren(self)




    def sourceFile(self):

        localctx = GoLangParser.SourceFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.packageClause()
            self.state = 199
            self.eos()
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.IMPORT:
                self.state = 200
                self.importDecl()
                self.state = 201
                self.eos()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.CONST) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.VAR))) != 0):
                self.state = 211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.functionDecl()
                    pass

                elif la_ == 2:
                    self.state = 209
                    self.methodDecl()
                    pass

                elif la_ == 3:
                    self.state = 210
                    self.declaration()
                    pass


                self.state = 213
                self.eos()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.PackageClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_packageClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPackageClause"):
                listener.enterPackageClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPackageClause"):
                listener.exitPackageClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPackageClause"):
                return visitor.visitPackageClause(self)
            else:
                return visitor.visitChildren(self)




    def packageClause(self):

        localctx = GoLangParser.PackageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(GoLangParser.PACKAGE)
            self.state = 221
            self.match(GoLangParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ImportDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def importSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ImportSpecContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ImportSpecContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_importDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterImportDecl"):
                listener.enterImportDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImportDecl"):
                listener.exitImportDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImportDecl"):
                return visitor.visitImportDecl(self)
            else:
                return visitor.visitChildren(self)




    def importDecl(self):

        localctx = GoLangParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.match(GoLangParser.IMPORT)
                self.state = 235
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GoLangParser.IDENTIFIER, GoLangParser.DOT, GoLangParser.RAW_STRING_LIT, GoLangParser.INTERPRETED_STRING_LIT]:
                    self.state = 224
                    self.importSpec()
                    pass
                elif token in [GoLangParser.L_PAREN]:
                    self.state = 225
                    self.match(GoLangParser.L_PAREN)
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (GoLangParser.IDENTIFIER - 27)) | (1 << (GoLangParser.DOT - 27)) | (1 << (GoLangParser.RAW_STRING_LIT - 27)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 27)))) != 0):
                        self.state = 226
                        self.importSpec()
                        self.state = 227
                        self.eos()
                        self.state = 233
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 234
                    self.match(GoLangParser.R_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.match(GoLangParser.IMPORT)
                self.state = 238
                self.match(GoLangParser.L_PAREN)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (GoLangParser.IDENTIFIER - 27)) | (1 << (GoLangParser.DOT - 27)) | (1 << (GoLangParser.RAW_STRING_LIT - 27)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 27)))) != 0):
                    self.state = 239
                    self.importSpec()
                    self.state = 240
                    self.eos()
                    self.state = 246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 247
                self.match(GoLangParser.R_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.match(GoLangParser.IMPORT)
                self.state = 249
                self.importSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ImportSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(GoLangParser.ImportPathContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_importSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterImportSpec"):
                listener.enterImportSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImportSpec"):
                listener.exitImportSpec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImportSpec"):
                return visitor.visitImportSpec(self)
            else:
                return visitor.visitChildren(self)




    def importSpec(self):

        localctx = GoLangParser.ImportSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.IDENTIFIER or _la==GoLangParser.DOT:
                self.state = 252
                _la = self._input.LA(1)
                if not(_la==GoLangParser.IDENTIFIER or _la==GoLangParser.DOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 255
            self.importPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportPathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ImportPathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def string_(self):
            return self.getTypedRuleContext(GoLangParser.String_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_importPath

        def enterRule(self, listener):
            if hasattr(listener, "enterImportPath"):
                listener.enterImportPath(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitImportPath"):
                listener.exitImportPath(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitImportPath"):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = GoLangParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.DeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constDecl(self):
            return self.getTypedRuleContext(GoLangParser.ConstDeclContext,0)


        def typeDecl(self):
            return self.getTypedRuleContext(GoLangParser.TypeDeclContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(GoLangParser.VarDeclContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_declaration

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = GoLangParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_declaration)
        try:
            self.state = 262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.constDecl()
                pass
            elif token in [GoLangParser.TYPE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.typeDecl()
                pass
            elif token in [GoLangParser.VAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.varDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ConstDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ConstSpecContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ConstSpecContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_constDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterConstDecl"):
                listener.enterConstDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstDecl"):
                listener.exitConstDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConstDecl"):
                return visitor.visitConstDecl(self)
            else:
                return visitor.visitChildren(self)




    def constDecl(self):

        localctx = GoLangParser.ConstDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_constDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(GoLangParser.CONST)
            self.state = 276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.IDENTIFIER]:
                self.state = 265
                self.constSpec()
                pass
            elif token in [GoLangParser.L_PAREN]:
                self.state = 266
                self.match(GoLangParser.L_PAREN)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GoLangParser.IDENTIFIER:
                    self.state = 267
                    self.constSpec()
                    self.state = 268
                    self.eos()
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 275
                self.match(GoLangParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ConstSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_constSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterConstSpec"):
                listener.enterConstSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstSpec"):
                listener.exitConstSpec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConstSpec"):
                return visitor.visitConstSpec(self)
            else:
                return visitor.visitChildren(self)




    def constSpec(self):

        localctx = GoLangParser.ConstSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_constSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.identifierList()
            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.RECEIVE))) != 0):
                    self.state = 279
                    self.type_()


                self.state = 282
                self.match(GoLangParser.ASSIGN)
                self.state = 283
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.IdentifierListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.IDENTIFIER)
            else:
                return self.getToken(GoLangParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return GoLangParser.RULE_identifierList

        def enterRule(self, listener):
            if hasattr(listener, "enterIdentifierList"):
                listener.enterIdentifierList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdentifierList"):
                listener.exitIdentifierList(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifierList"):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = GoLangParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(GoLangParser.IDENTIFIER)
            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 287
                    self.match(GoLangParser.COMMA)
                    self.state = 288
                    self.match(GoLangParser.IDENTIFIER) 
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExpressionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_expressionList

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressionList"):
                listener.enterExpressionList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressionList"):
                listener.exitExpressionList(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExpressionList"):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = GoLangParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.expression(0)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 295
                    self.match(GoLangParser.COMMA)
                    self.state = 296
                    self.expression(0) 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.TypeSpecContext)
            else:
                return self.getTypedRuleContext(GoLangParser.TypeSpecContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeDecl"):
                listener.enterTypeDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeDecl"):
                listener.exitTypeDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeDecl"):
                return visitor.visitTypeDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeDecl(self):

        localctx = GoLangParser.TypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(GoLangParser.TYPE)
            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.IDENTIFIER]:
                self.state = 303
                self.typeSpec()
                pass
            elif token in [GoLangParser.L_PAREN]:
                self.state = 304
                self.match(GoLangParser.L_PAREN)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GoLangParser.IDENTIFIER:
                    self.state = 305
                    self.typeSpec()
                    self.state = 306
                    self.eos()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 313
                self.match(GoLangParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(GoLangParser.ASSIGN, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_typeSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeSpec"):
                listener.enterTypeSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeSpec"):
                listener.exitTypeSpec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeSpec"):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = GoLangParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(GoLangParser.IDENTIFIER)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.ASSIGN:
                self.state = 317
                self.match(GoLangParser.ASSIGN)


            self.state = 320
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.FunctionDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoLangParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoLangParser.BlockContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_functionDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionDecl"):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionDecl"):
                listener.exitFunctionDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFunctionDecl"):
                return visitor.visitFunctionDecl(self)
            else:
                return visitor.visitChildren(self)




    def functionDecl(self):

        localctx = GoLangParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(GoLangParser.FUNC)
            self.state = 323
            self.match(GoLangParser.IDENTIFIER)

            self.state = 324
            self.signature()
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 325
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.MethodDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def receiver(self):
            return self.getTypedRuleContext(GoLangParser.ReceiverContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoLangParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoLangParser.BlockContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_methodDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterMethodDecl"):
                listener.enterMethodDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethodDecl"):
                listener.exitMethodDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMethodDecl"):
                return visitor.visitMethodDecl(self)
            else:
                return visitor.visitChildren(self)




    def methodDecl(self):

        localctx = GoLangParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_methodDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(GoLangParser.FUNC)
            self.state = 329
            self.receiver()
            self.state = 330
            self.match(GoLangParser.IDENTIFIER)

            self.state = 331
            self.signature()
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 332
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiverContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ReceiverContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoLangParser.ParametersContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_receiver

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiver"):
                listener.enterReceiver(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiver"):
                listener.exitReceiver(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiver"):
                return visitor.visitReceiver(self)
            else:
                return visitor.visitChildren(self)




    def receiver(self):

        localctx = GoLangParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_receiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.VarDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def varSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.VarSpecContext)
            else:
                return self.getTypedRuleContext(GoLangParser.VarSpecContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_varDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterVarDecl"):
                listener.enterVarDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVarDecl"):
                listener.exitVarDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitVarDecl"):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = GoLangParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(GoLangParser.VAR)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.IDENTIFIER]:
                self.state = 338
                self.varSpec()
                pass
            elif token in [GoLangParser.L_PAREN]:
                self.state = 339
                self.match(GoLangParser.L_PAREN)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GoLangParser.IDENTIFIER:
                    self.state = 340
                    self.varSpec()
                    self.state = 341
                    self.eos()
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 348
                self.match(GoLangParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.VarSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_varSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterVarSpec"):
                listener.enterVarSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVarSpec"):
                listener.exitVarSpec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitVarSpec"):
                return visitor.visitVarSpec(self)
            else:
                return visitor.visitChildren(self)




    def varSpec(self):

        localctx = GoLangParser.VarSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_varSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.identifierList()
            self.state = 359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.FUNC, GoLangParser.INTERFACE, GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.CHAN, GoLangParser.IDENTIFIER, GoLangParser.L_PAREN, GoLangParser.L_BRACKET, GoLangParser.STAR, GoLangParser.RECEIVE]:
                self.state = 352
                self.type_()
                self.state = 355
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 353
                    self.match(GoLangParser.ASSIGN)
                    self.state = 354
                    self.expressionList()


                pass
            elif token in [GoLangParser.ASSIGN]:
                self.state = 357
                self.match(GoLangParser.ASSIGN)
                self.state = 358
                self.expressionList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.BlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statementList(self):
            return self.getTypedRuleContext(GoLangParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_block

        def enterRule(self, listener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GoLangParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(GoLangParser.L_CURLY)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.DEFER) | (1 << GoLangParser.GO) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.CONST) | (1 << GoLangParser.IF) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.FOR) | (1 << GoLangParser.RETURN) | (1 << GoLangParser.VAR) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 362
                self.statementList()


            self.state = 365
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.StatementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.StatementContext)
            else:
                return self.getTypedRuleContext(GoLangParser.StatementContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_statementList

        def enterRule(self, listener):
            if hasattr(listener, "enterStatementList"):
                listener.enterStatementList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatementList"):
                listener.exitStatementList(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStatementList"):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)




    def statementList(self):

        localctx = GoLangParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_statementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 367
                self.statement()
                self.state = 368
                self.eos()
                self.state = 372 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.DEFER) | (1 << GoLangParser.GO) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.CONST) | (1 << GoLangParser.IF) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.FOR) | (1 << GoLangParser.RETURN) | (1 << GoLangParser.VAR) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.StatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GoLangParser.RULE_statement

     
        def copyFrom(self, ctx):
            super(GoLangParser.StatementContext, self).copyFrom(ctx)



    class SmtifContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtifContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ifStmt(self):
            return self.getTypedRuleContext(GoLangParser.IfStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtif"):
                listener.enterSmtif(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtif"):
                listener.exitSmtif(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtif"):
                return visitor.visitSmtif(self)
            else:
                return visitor.visitChildren(self)


    class SmtfunctionContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtfunctionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.IDENTIFIER)
            else:
                return self.getToken(GoLangParser.IDENTIFIER, i)
        def arguments(self):
            return self.getTypedRuleContext(GoLangParser.ArgumentsContext,0)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.DOT)
            else:
                return self.getToken(GoLangParser.DOT, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterSmtfunction"):
                listener.enterSmtfunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtfunction"):
                listener.exitSmtfunction(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtfunction"):
                return visitor.visitSmtfunction(self)
            else:
                return visitor.visitChildren(self)


    class SmtretContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtretContext, self).__init__(parser)
            self.copyFrom(ctx)

        def returnStmt(self):
            return self.getTypedRuleContext(GoLangParser.ReturnStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtret"):
                listener.enterSmtret(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtret"):
                listener.exitSmtret(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtret"):
                return visitor.visitSmtret(self)
            else:
                return visitor.visitChildren(self)


    class SmtsimpleContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtsimpleContext, self).__init__(parser)
            self.copyFrom(ctx)

        def simpleStmt(self):
            return self.getTypedRuleContext(GoLangParser.SimpleStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtsimple"):
                listener.enterSmtsimple(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtsimple"):
                listener.exitSmtsimple(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtsimple"):
                return visitor.visitSmtsimple(self)
            else:
                return visitor.visitChildren(self)


    class SmtgoContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtgoContext, self).__init__(parser)
            self.copyFrom(ctx)

        def goStmt(self):
            return self.getTypedRuleContext(GoLangParser.GoStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtgo"):
                listener.enterSmtgo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtgo"):
                listener.exitSmtgo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtgo"):
                return visitor.visitSmtgo(self)
            else:
                return visitor.visitChildren(self)


    class SmtfunctionassignContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtfunctionassignContext, self).__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.IDENTIFIER)
            else:
                return self.getToken(GoLangParser.IDENTIFIER, i)
        def arguments(self):
            return self.getTypedRuleContext(GoLangParser.ArgumentsContext,0)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.DOT)
            else:
                return self.getToken(GoLangParser.DOT, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterSmtfunctionassign"):
                listener.enterSmtfunctionassign(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtfunctionassign"):
                listener.exitSmtfunctionassign(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtfunctionassign"):
                return visitor.visitSmtfunctionassign(self)
            else:
                return visitor.visitChildren(self)


    class SmtdeferContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtdeferContext, self).__init__(parser)
            self.copyFrom(ctx)

        def deferStmt(self):
            return self.getTypedRuleContext(GoLangParser.DeferStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtdefer"):
                listener.enterSmtdefer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtdefer"):
                listener.exitSmtdefer(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtdefer"):
                return visitor.visitSmtdefer(self)
            else:
                return visitor.visitChildren(self)


    class SmtdecContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtdecContext, self).__init__(parser)
            self.copyFrom(ctx)

        def declaration(self):
            return self.getTypedRuleContext(GoLangParser.DeclarationContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtdec"):
                listener.enterSmtdec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtdec"):
                listener.exitSmtdec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtdec"):
                return visitor.visitSmtdec(self)
            else:
                return visitor.visitChildren(self)


    class SmtblockContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtblockContext, self).__init__(parser)
            self.copyFrom(ctx)

        def block(self):
            return self.getTypedRuleContext(GoLangParser.BlockContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtblock"):
                listener.enterSmtblock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtblock"):
                listener.exitSmtblock(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtblock"):
                return visitor.visitSmtblock(self)
            else:
                return visitor.visitChildren(self)


    class SmtlabeledContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtlabeledContext, self).__init__(parser)
            self.copyFrom(ctx)

        def labeledStmt(self):
            return self.getTypedRuleContext(GoLangParser.LabeledStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtlabeled"):
                listener.enterSmtlabeled(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtlabeled"):
                listener.exitSmtlabeled(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtlabeled"):
                return visitor.visitSmtlabeled(self)
            else:
                return visitor.visitChildren(self)


    class SmtforContext(StatementContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.StatementContext)
            super(GoLangParser.SmtforContext, self).__init__(parser)
            self.copyFrom(ctx)

        def forStmt(self):
            return self.getTypedRuleContext(GoLangParser.ForStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtfor"):
                listener.enterSmtfor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtfor"):
                listener.exitSmtfor(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtfor"):
                return visitor.visitSmtfor(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = GoLangParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = GoLangParser.SmtdecContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.declaration()
                pass

            elif la_ == 2:
                localctx = GoLangParser.SmtfunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.match(GoLangParser.IDENTIFIER)
                self.state = 376
                self.arguments()
                pass

            elif la_ == 3:
                localctx = GoLangParser.SmtfunctionassignContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.match(GoLangParser.IDENTIFIER)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GoLangParser.COMMA:
                    self.state = 378
                    self.match(GoLangParser.COMMA)
                    self.state = 379
                    self.match(GoLangParser.IDENTIFIER)
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 385
                _la = self._input.LA(1)
                if not(_la==GoLangParser.ASSIGN or _la==GoLangParser.DECLARE_ASSIGN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 388 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 386
                        self.match(GoLangParser.IDENTIFIER)
                        self.state = 387
                        self.match(GoLangParser.DOT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 390 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 392
                self.match(GoLangParser.IDENTIFIER)
                self.state = 393
                self.arguments()
                pass

            elif la_ == 4:
                localctx = GoLangParser.SmtfunctionassignContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 394
                self.match(GoLangParser.IDENTIFIER)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GoLangParser.COMMA:
                    self.state = 395
                    self.match(GoLangParser.COMMA)
                    self.state = 396
                    self.match(GoLangParser.IDENTIFIER)
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 402
                _la = self._input.LA(1)
                if not(_la==GoLangParser.ASSIGN or _la==GoLangParser.DECLARE_ASSIGN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 403
                self.match(GoLangParser.IDENTIFIER)
                self.state = 404
                self.arguments()
                pass

            elif la_ == 5:
                localctx = GoLangParser.SmtfunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 407 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 405
                        self.match(GoLangParser.IDENTIFIER)
                        self.state = 406
                        self.match(GoLangParser.DOT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 409 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                self.state = 411
                self.match(GoLangParser.IDENTIFIER)
                self.state = 412
                self.arguments()
                pass

            elif la_ == 6:
                localctx = GoLangParser.SmtlabeledContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 413
                self.labeledStmt()
                pass

            elif la_ == 7:
                localctx = GoLangParser.SmtsimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 414
                self.simpleStmt()
                pass

            elif la_ == 8:
                localctx = GoLangParser.SmtgoContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 415
                self.goStmt()
                pass

            elif la_ == 9:
                localctx = GoLangParser.SmtretContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 416
                self.returnStmt()
                pass

            elif la_ == 10:
                localctx = GoLangParser.SmtblockContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 417
                self.block()
                pass

            elif la_ == 11:
                localctx = GoLangParser.SmtifContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 418
                self.ifStmt()
                pass

            elif la_ == 12:
                localctx = GoLangParser.SmtforContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 419
                self.forStmt()
                pass

            elif la_ == 13:
                localctx = GoLangParser.SmtdeferContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 420
                self.deferStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SimpleStmtContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GoLangParser.RULE_simpleStmt

     
        def copyFrom(self, ctx):
            super(GoLangParser.SimpleStmtContext, self).copyFrom(ctx)



    class SmtemptyContext(SimpleStmtContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.SimpleStmtContext)
            super(GoLangParser.SmtemptyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def emptyStmt(self):
            return self.getTypedRuleContext(GoLangParser.EmptyStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtempty"):
                listener.enterSmtempty(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtempty"):
                listener.exitSmtempty(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtempty"):
                return visitor.visitSmtempty(self)
            else:
                return visitor.visitChildren(self)


    class SmtassContext(SimpleStmtContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.SimpleStmtContext)
            super(GoLangParser.SmtassContext, self).__init__(parser)
            self.copyFrom(ctx)

        def assignment(self):
            return self.getTypedRuleContext(GoLangParser.AssignmentContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtass"):
                listener.enterSmtass(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtass"):
                listener.exitSmtass(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtass"):
                return visitor.visitSmtass(self)
            else:
                return visitor.visitChildren(self)


    class SmtsendContext(SimpleStmtContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.SimpleStmtContext)
            super(GoLangParser.SmtsendContext, self).__init__(parser)
            self.copyFrom(ctx)

        def sendStmt(self):
            return self.getTypedRuleContext(GoLangParser.SendStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtsend"):
                listener.enterSmtsend(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtsend"):
                listener.exitSmtsend(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtsend"):
                return visitor.visitSmtsend(self)
            else:
                return visitor.visitChildren(self)


    class SmtincContext(SimpleStmtContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.SimpleStmtContext)
            super(GoLangParser.SmtincContext, self).__init__(parser)
            self.copyFrom(ctx)

        def incDecStmt(self):
            return self.getTypedRuleContext(GoLangParser.IncDecStmtContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtinc"):
                listener.enterSmtinc(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtinc"):
                listener.exitSmtinc(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtinc"):
                return visitor.visitSmtinc(self)
            else:
                return visitor.visitChildren(self)


    class SmtshortdecContext(SimpleStmtContext):

        def __init__(self, parser, ctx): # actually a GoLangParser.SimpleStmtContext)
            super(GoLangParser.SmtshortdecContext, self).__init__(parser)
            self.copyFrom(ctx)

        def shortVarDecl(self):
            return self.getTypedRuleContext(GoLangParser.ShortVarDeclContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSmtshortdec"):
                listener.enterSmtshortdec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSmtshortdec"):
                listener.exitSmtshortdec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSmtshortdec"):
                return visitor.visitSmtshortdec(self)
            else:
                return visitor.visitChildren(self)



    def simpleStmt(self):

        localctx = GoLangParser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_simpleStmt)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                localctx = GoLangParser.SmtsendContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.sendStmt()
                pass

            elif la_ == 2:
                localctx = GoLangParser.SmtincContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.incDecStmt()
                pass

            elif la_ == 3:
                localctx = GoLangParser.SmtassContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.assignment()
                pass

            elif la_ == 4:
                localctx = GoLangParser.SmtshortdecContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 426
                self.shortVarDecl()
                pass

            elif la_ == 5:
                localctx = GoLangParser.SmtemptyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 427
                self.emptyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExpressionStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_expressionStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressionStmt"):
                listener.enterExpressionStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressionStmt"):
                listener.exitExpressionStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExpressionStmt"):
                return visitor.visitExpressionStmt(self)
            else:
                return visitor.visitChildren(self)




    def expressionStmt(self):

        localctx = GoLangParser.ExpressionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expressionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SendStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_sendStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSendStmt"):
                listener.enterSendStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendStmt"):
                listener.exitSendStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendStmt"):
                return visitor.visitSendStmt(self)
            else:
                return visitor.visitChildren(self)




    def sendStmt(self):

        localctx = GoLangParser.SendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.expression(0)
            self.state = 433
            self.match(GoLangParser.RECEIVE)
            self.state = 434
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncDecStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.IncDecStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def PLUS_PLUS(self):
            return self.getToken(GoLangParser.PLUS_PLUS, 0)

        def MINUS_MINUS(self):
            return self.getToken(GoLangParser.MINUS_MINUS, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_incDecStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterIncDecStmt"):
                listener.enterIncDecStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIncDecStmt"):
                listener.exitIncDecStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIncDecStmt"):
                return visitor.visitIncDecStmt(self)
            else:
                return visitor.visitChildren(self)




    def incDecStmt(self):

        localctx = GoLangParser.IncDecStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_incDecStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.expression(0)
            self.state = 437
            _la = self._input.LA(1)
            if not(_la==GoLangParser.PLUS_PLUS or _la==GoLangParser.MINUS_MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.AssignmentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExpressionListContext,i)


        def assign_op(self):
            return self.getTypedRuleContext(GoLangParser.Assign_opContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_assignment

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssignment"):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = GoLangParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.expressionList()
            self.state = 440
            self.assign_op()
            self.state = 441
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assign_opContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.Assign_opContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GoLangParser.RULE_assign_op

        def enterRule(self, listener):
            if hasattr(listener, "enterAssign_op"):
                listener.enterAssign_op(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssign_op"):
                listener.exitAssign_op(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssign_op"):
                return visitor.visitAssign_op(self)
            else:
                return visitor.visitChildren(self)




    def assign_op(self):

        localctx = GoLangParser.Assign_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assign_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.OR) | (1 << GoLangParser.DIV) | (1 << GoLangParser.MOD) | (1 << GoLangParser.LSHIFT) | (1 << GoLangParser.RSHIFT) | (1 << GoLangParser.BIT_CLEAR) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND))) != 0):
                self.state = 443
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.OR) | (1 << GoLangParser.DIV) | (1 << GoLangParser.MOD) | (1 << GoLangParser.LSHIFT) | (1 << GoLangParser.RSHIFT) | (1 << GoLangParser.BIT_CLEAR) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 446
            self.match(GoLangParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShortVarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ShortVarDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_shortVarDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterShortVarDecl"):
                listener.enterShortVarDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShortVarDecl"):
                listener.exitShortVarDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitShortVarDecl"):
                return visitor.visitShortVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def shortVarDecl(self):

        localctx = GoLangParser.ShortVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_shortVarDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.identifierList()
            self.state = 449
            self.match(GoLangParser.DECLARE_ASSIGN)
            self.state = 450
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.EmptyStmtContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GoLangParser.RULE_emptyStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterEmptyStmt"):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEmptyStmt"):
                listener.exitEmptyStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEmptyStmt"):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = GoLangParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(GoLangParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.LabeledStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def statement(self):
            return self.getTypedRuleContext(GoLangParser.StatementContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_labeledStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterLabeledStmt"):
                listener.enterLabeledStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLabeledStmt"):
                listener.exitLabeledStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLabeledStmt"):
                return visitor.visitLabeledStmt(self)
            else:
                return visitor.visitChildren(self)




    def labeledStmt(self):

        localctx = GoLangParser.LabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_labeledStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(GoLangParser.IDENTIFIER)
            self.state = 455
            self.match(GoLangParser.COLON)
            self.state = 456
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ReturnStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_returnStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterReturnStmt"):
                listener.enterReturnStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturnStmt"):
                listener.exitReturnStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStmt"):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = GoLangParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(GoLangParser.RETURN)
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 459
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.BreakStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_breakStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterBreakStmt"):
                listener.enterBreakStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBreakStmt"):
                listener.exitBreakStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBreakStmt"):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = GoLangParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_breakStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(GoLangParser.BREAK)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.IDENTIFIER:
                self.state = 463
                self.match(GoLangParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ContinueStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_continueStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterContinueStmt"):
                listener.enterContinueStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitContinueStmt"):
                listener.exitContinueStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueStmt"):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)




    def continueStmt(self):

        localctx = GoLangParser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_continueStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(GoLangParser.CONTINUE)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.IDENTIFIER:
                self.state = 467
                self.match(GoLangParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotoStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.GotoStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_gotoStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterGotoStmt"):
                listener.enterGotoStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGotoStmt"):
                listener.exitGotoStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGotoStmt"):
                return visitor.visitGotoStmt(self)
            else:
                return visitor.visitChildren(self)




    def gotoStmt(self):

        localctx = GoLangParser.GotoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_gotoStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(GoLangParser.GOTO)
            self.state = 471
            self.match(GoLangParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FallthroughStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.FallthroughStmtContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GoLangParser.RULE_fallthroughStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterFallthroughStmt"):
                listener.enterFallthroughStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFallthroughStmt"):
                listener.exitFallthroughStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFallthroughStmt"):
                return visitor.visitFallthroughStmt(self)
            else:
                return visitor.visitChildren(self)




    def fallthroughStmt(self):

        localctx = GoLangParser.FallthroughStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fallthroughStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(GoLangParser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeferStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.DeferStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def operandName(self):
            return self.getTypedRuleContext(GoLangParser.OperandNameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GoLangParser.ArgumentsContext,0)


        def methodExpr(self):
            return self.getTypedRuleContext(GoLangParser.MethodExprContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_deferStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterDeferStmt"):
                listener.enterDeferStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeferStmt"):
                listener.exitDeferStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeferStmt"):
                return visitor.visitDeferStmt(self)
            else:
                return visitor.visitChildren(self)




    def deferStmt(self):

        localctx = GoLangParser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_deferStmt)
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.match(GoLangParser.DEFER)
                self.state = 476
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.match(GoLangParser.DEFER)
                self.state = 478
                self.operandName()
                self.state = 479
                self.arguments()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 481
                self.match(GoLangParser.DEFER)
                self.state = 482
                self.methodExpr()
                self.state = 483
                self.arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.IfStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def block(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.BlockContext)
            else:
                return self.getTypedRuleContext(GoLangParser.BlockContext,i)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoLangParser.SimpleStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(GoLangParser.IfStmtContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_ifStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterIfStmt"):
                listener.enterIfStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfStmt"):
                listener.exitIfStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStmt"):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = GoLangParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(GoLangParser.IF)
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 488
                self.simpleStmt()
                self.state = 489
                self.match(GoLangParser.SEMI)


            self.state = 493
            self.expression(0)
            self.state = 494
            self.block()
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 495
                self.match(GoLangParser.ELSE)
                self.state = 498
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GoLangParser.IF]:
                    self.state = 496
                    self.ifStmt()
                    pass
                elif token in [GoLangParser.L_CURLY]:
                    self.state = 497
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SwitchStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchStmt(self):
            return self.getTypedRuleContext(GoLangParser.ExprSwitchStmtContext,0)


        def typeSwitchStmt(self):
            return self.getTypedRuleContext(GoLangParser.TypeSwitchStmtContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_switchStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSwitchStmt"):
                listener.enterSwitchStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSwitchStmt"):
                listener.exitSwitchStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSwitchStmt"):
                return visitor.visitSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def switchStmt(self):

        localctx = GoLangParser.SwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_switchStmt)
        try:
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.exprSwitchStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.typeSwitchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprSwitchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExprSwitchStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self):
            return self.getTypedRuleContext(GoLangParser.SimpleStmtContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def exprCaseClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExprCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExprCaseClauseContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_exprSwitchStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterExprSwitchStmt"):
                listener.enterExprSwitchStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExprSwitchStmt"):
                listener.exitExprSwitchStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExprSwitchStmt"):
                return visitor.visitExprSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchStmt(self):

        localctx = GoLangParser.ExprSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exprSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(GoLangParser.SWITCH)
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 507
                self.simpleStmt()
                self.state = 508
                self.match(GoLangParser.SEMI)


            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 512
                self.expression(0)


            self.state = 515
            self.match(GoLangParser.L_CURLY)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.DEFAULT or _la==GoLangParser.CASE:
                self.state = 516
                self.exprCaseClause()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 522
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprCaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExprCaseClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchCase(self):
            return self.getTypedRuleContext(GoLangParser.ExprSwitchCaseContext,0)


        def statementList(self):
            return self.getTypedRuleContext(GoLangParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_exprCaseClause

        def enterRule(self, listener):
            if hasattr(listener, "enterExprCaseClause"):
                listener.enterExprCaseClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExprCaseClause"):
                listener.exitExprCaseClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExprCaseClause"):
                return visitor.visitExprCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def exprCaseClause(self):

        localctx = GoLangParser.ExprCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exprCaseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.exprSwitchCase()
            self.state = 525
            self.match(GoLangParser.COLON)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.DEFER) | (1 << GoLangParser.GO) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.CONST) | (1 << GoLangParser.IF) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.FOR) | (1 << GoLangParser.RETURN) | (1 << GoLangParser.VAR) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 526
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprSwitchCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExprSwitchCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_exprSwitchCase

        def enterRule(self, listener):
            if hasattr(listener, "enterExprSwitchCase"):
                listener.enterExprSwitchCase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExprSwitchCase"):
                listener.exitExprSwitchCase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExprSwitchCase"):
                return visitor.visitExprSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchCase(self):

        localctx = GoLangParser.ExprSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exprSwitchCase)
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.match(GoLangParser.CASE)
                self.state = 530
                self.expressionList()
                pass
            elif token in [GoLangParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.match(GoLangParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSwitchStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeSwitchStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSwitchGuard(self):
            return self.getTypedRuleContext(GoLangParser.TypeSwitchGuardContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoLangParser.SimpleStmtContext,0)


        def typeCaseClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.TypeCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoLangParser.TypeCaseClauseContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeSwitchStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeSwitchStmt"):
                listener.enterTypeSwitchStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeSwitchStmt"):
                listener.exitTypeSwitchStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeSwitchStmt"):
                return visitor.visitTypeSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchStmt(self):

        localctx = GoLangParser.TypeSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(GoLangParser.SWITCH)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 535
                self.simpleStmt()
                self.state = 536
                self.match(GoLangParser.SEMI)


            self.state = 540
            self.typeSwitchGuard()
            self.state = 541
            self.match(GoLangParser.L_CURLY)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.DEFAULT or _la==GoLangParser.CASE:
                self.state = 542
                self.typeCaseClause()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSwitchGuardContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeSwitchGuardContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoLangParser.PrimaryExprContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_typeSwitchGuard

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeSwitchGuard"):
                listener.enterTypeSwitchGuard(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeSwitchGuard"):
                listener.exitTypeSwitchGuard(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeSwitchGuard"):
                return visitor.visitTypeSwitchGuard(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchGuard(self):

        localctx = GoLangParser.TypeSwitchGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeSwitchGuard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(GoLangParser.IDENTIFIER)
                self.state = 551
                self.match(GoLangParser.DECLARE_ASSIGN)


            self.state = 554
            self.primaryExpr(0)
            self.state = 555
            self.match(GoLangParser.DOT)
            self.state = 556
            self.match(GoLangParser.L_PAREN)
            self.state = 557
            self.match(GoLangParser.TYPE)
            self.state = 558
            self.match(GoLangParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeCaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeCaseClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSwitchCase(self):
            return self.getTypedRuleContext(GoLangParser.TypeSwitchCaseContext,0)


        def statementList(self):
            return self.getTypedRuleContext(GoLangParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeCaseClause

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeCaseClause"):
                listener.enterTypeCaseClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeCaseClause"):
                listener.exitTypeCaseClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeCaseClause"):
                return visitor.visitTypeCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def typeCaseClause(self):

        localctx = GoLangParser.TypeCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeCaseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.typeSwitchCase()
            self.state = 561
            self.match(GoLangParser.COLON)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.DEFER) | (1 << GoLangParser.GO) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.CONST) | (1 << GoLangParser.IF) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.FOR) | (1 << GoLangParser.RETURN) | (1 << GoLangParser.VAR) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 562
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSwitchCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeSwitchCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeList(self):
            return self.getTypedRuleContext(GoLangParser.TypeListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeSwitchCase

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeSwitchCase"):
                listener.enterTypeSwitchCase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeSwitchCase"):
                listener.exitTypeSwitchCase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeSwitchCase"):
                return visitor.visitTypeSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchCase(self):

        localctx = GoLangParser.TypeSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeSwitchCase)
        try:
            self.state = 568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.match(GoLangParser.CASE)
                self.state = 566
                self.typeList()
                pass
            elif token in [GoLangParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.match(GoLangParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.Type_Context)
            else:
                return self.getTypedRuleContext(GoLangParser.Type_Context,i)


        def NIL_LIT(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.NIL_LIT)
            else:
                return self.getToken(GoLangParser.NIL_LIT, i)

        def getRuleIndex(self):
            return GoLangParser.RULE_typeList

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeList"):
                listener.enterTypeList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeList"):
                listener.exitTypeList(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeList"):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = GoLangParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.FUNC, GoLangParser.INTERFACE, GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.CHAN, GoLangParser.IDENTIFIER, GoLangParser.L_PAREN, GoLangParser.L_BRACKET, GoLangParser.STAR, GoLangParser.RECEIVE]:
                self.state = 570
                self.type_()
                pass
            elif token in [GoLangParser.NIL_LIT]:
                self.state = 571
                self.match(GoLangParser.NIL_LIT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.COMMA:
                self.state = 574
                self.match(GoLangParser.COMMA)
                self.state = 577
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GoLangParser.FUNC, GoLangParser.INTERFACE, GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.CHAN, GoLangParser.IDENTIFIER, GoLangParser.L_PAREN, GoLangParser.L_BRACKET, GoLangParser.STAR, GoLangParser.RECEIVE]:
                    self.state = 575
                    self.type_()
                    pass
                elif token in [GoLangParser.NIL_LIT]:
                    self.state = 576
                    self.match(GoLangParser.NIL_LIT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SelectStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def commClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.CommClauseContext)
            else:
                return self.getTypedRuleContext(GoLangParser.CommClauseContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_selectStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectStmt"):
                listener.enterSelectStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectStmt"):
                listener.exitSelectStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSelectStmt"):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = GoLangParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(GoLangParser.SELECT)
            self.state = 585
            self.match(GoLangParser.L_CURLY)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.DEFAULT or _la==GoLangParser.CASE:
                self.state = 586
                self.commClause()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.CommClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def commCase(self):
            return self.getTypedRuleContext(GoLangParser.CommCaseContext,0)


        def statementList(self):
            return self.getTypedRuleContext(GoLangParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_commClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCommClause"):
                listener.enterCommClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommClause"):
                listener.exitCommClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommClause"):
                return visitor.visitCommClause(self)
            else:
                return visitor.visitChildren(self)




    def commClause(self):

        localctx = GoLangParser.CommClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_commClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.commCase()
            self.state = 595
            self.match(GoLangParser.COLON)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.DEFER) | (1 << GoLangParser.GO) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.CONST) | (1 << GoLangParser.IF) | (1 << GoLangParser.TYPE) | (1 << GoLangParser.FOR) | (1 << GoLangParser.RETURN) | (1 << GoLangParser.VAR) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 596
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommCaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.CommCaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sendStmt(self):
            return self.getTypedRuleContext(GoLangParser.SendStmtContext,0)


        def recvStmt(self):
            return self.getTypedRuleContext(GoLangParser.RecvStmtContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_commCase

        def enterRule(self, listener):
            if hasattr(listener, "enterCommCase"):
                listener.enterCommCase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommCase"):
                listener.exitCommCase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommCase"):
                return visitor.visitCommCase(self)
            else:
                return visitor.visitChildren(self)




    def commCase(self):

        localctx = GoLangParser.CommCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_commCase)
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(GoLangParser.CASE)
                self.state = 602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.sendStmt()
                    pass

                elif la_ == 2:
                    self.state = 601
                    self.recvStmt()
                    pass


                pass
            elif token in [GoLangParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match(GoLangParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecvStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.RecvStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_recvStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterRecvStmt"):
                listener.enterRecvStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecvStmt"):
                listener.exitRecvStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecvStmt"):
                return visitor.visitRecvStmt(self)
            else:
                return visitor.visitChildren(self)




    def recvStmt(self):

        localctx = GoLangParser.RecvStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_recvStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 607
                self.expressionList()
                self.state = 608
                self.match(GoLangParser.ASSIGN)

            elif la_ == 2:
                self.state = 610
                self.identifierList()
                self.state = 611
                self.match(GoLangParser.DECLARE_ASSIGN)


            self.state = 615
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ForStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(GoLangParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def forClause(self):
            return self.getTypedRuleContext(GoLangParser.ForClauseContext,0)


        def rangeClause(self):
            return self.getTypedRuleContext(GoLangParser.RangeClauseContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_forStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterForStmt"):
                listener.enterForStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForStmt"):
                listener.exitForStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitForStmt"):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = GoLangParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(GoLangParser.FOR)
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 618
                self.expression(0)

            elif la_ == 2:
                self.state = 619
                self.forClause()

            elif la_ == 3:
                self.state = 620
                self.rangeClause()


            self.state = 623
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ForClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleStmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(GoLangParser.SimpleStmtContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_forClause

        def enterRule(self, listener):
            if hasattr(listener, "enterForClause"):
                listener.enterForClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForClause"):
                listener.exitForClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitForClause"):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = GoLangParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 625
                self.simpleStmt()


            self.state = 628
            self.match(GoLangParser.SEMI)
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 629
                self.expression(0)


            self.state = 632
            self.match(GoLangParser.SEMI)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.SEMI) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 633
                self.simpleStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.RangeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_rangeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRangeClause"):
                listener.enterRangeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRangeClause"):
                listener.exitRangeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRangeClause"):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = GoLangParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 636
                self.expressionList()
                self.state = 637
                self.match(GoLangParser.ASSIGN)

            elif la_ == 2:
                self.state = 639
                self.identifierList()
                self.state = 640
                self.match(GoLangParser.DECLARE_ASSIGN)


            self.state = 644
            self.match(GoLangParser.RANGE)
            self.state = 645
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoStmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.GoStmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_goStmt

        def enterRule(self, listener):
            if hasattr(listener, "enterGoStmt"):
                listener.enterGoStmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoStmt"):
                listener.exitGoStmt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoStmt"):
                return visitor.visitGoStmt(self)
            else:
                return visitor.visitChildren(self)




    def goStmt(self):

        localctx = GoLangParser.GoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_goStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(GoLangParser.GO)
            self.state = 648
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.Type_Context, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoLangParser.TypeNameContext,0)


        def typeLit(self):
            return self.getTypedRuleContext(GoLangParser.TypeLitContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_type_

        def enterRule(self, listener):
            if hasattr(listener, "enterType_"):
                listener.enterType_(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_"):
                listener.exitType_(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitType_"):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = GoLangParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_type_)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.typeName()
                pass
            elif token in [GoLangParser.FUNC, GoLangParser.INTERFACE, GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.CHAN, GoLangParser.L_BRACKET, GoLangParser.STAR, GoLangParser.RECEIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.typeLit()
                pass
            elif token in [GoLangParser.L_PAREN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 652
                self.match(GoLangParser.L_PAREN)
                self.state = 653
                self.type_()
                self.state = 654
                self.match(GoLangParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoLangParser.QualifiedIdentContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeName

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeName"):
                listener.enterTypeName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeName"):
                listener.exitTypeName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeName"):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = GoLangParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeName)
        try:
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(GoLangParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.qualifiedIdent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeLitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeLitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(GoLangParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(GoLangParser.StructTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(GoLangParser.PointerTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(GoLangParser.FunctionTypeContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(GoLangParser.InterfaceTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoLangParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoLangParser.MapTypeContext,0)


        def channelType(self):
            return self.getTypedRuleContext(GoLangParser.ChannelTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeLit

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeLit"):
                listener.enterTypeLit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeLit"):
                listener.exitTypeLit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeLit"):
                return visitor.visitTypeLit(self)
            else:
                return visitor.visitChildren(self)




    def typeLit(self):

        localctx = GoLangParser.TypeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeLit)
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.arrayType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.structType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self.pointerType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.functionType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 666
                self.interfaceType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 667
                self.sliceType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 668
                self.mapType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 669
                self.channelType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ArrayTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arrayLength(self):
            return self.getTypedRuleContext(GoLangParser.ArrayLengthContext,0)


        def elementType(self):
            return self.getTypedRuleContext(GoLangParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_arrayType

        def enterRule(self, listener):
            if hasattr(listener, "enterArrayType"):
                listener.enterArrayType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArrayType"):
                listener.exitArrayType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayType"):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = GoLangParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(GoLangParser.L_BRACKET)
            self.state = 673
            self.arrayLength()
            self.state = 674
            self.match(GoLangParser.R_BRACKET)
            self.state = 675
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ArrayLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_arrayLength

        def enterRule(self, listener):
            if hasattr(listener, "enterArrayLength"):
                listener.enterArrayLength(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArrayLength"):
                listener.exitArrayLength(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArrayLength"):
                return visitor.visitArrayLength(self)
            else:
                return visitor.visitChildren(self)




    def arrayLength(self):

        localctx = GoLangParser.ArrayLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ElementTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_elementType

        def enterRule(self, listener):
            if hasattr(listener, "enterElementType"):
                listener.enterElementType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElementType"):
                listener.exitElementType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitElementType"):
                return visitor.visitElementType(self)
            else:
                return visitor.visitChildren(self)




    def elementType(self):

        localctx = GoLangParser.ElementTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.PointerTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_pointerType

        def enterRule(self, listener):
            if hasattr(listener, "enterPointerType"):
                listener.enterPointerType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPointerType"):
                listener.exitPointerType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPointerType"):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = GoLangParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_pointerType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(GoLangParser.STAR)
            self.state = 682
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.InterfaceTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def methodSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.MethodSpecContext)
            else:
                return self.getTypedRuleContext(GoLangParser.MethodSpecContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_interfaceType

        def enterRule(self, listener):
            if hasattr(listener, "enterInterfaceType"):
                listener.enterInterfaceType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterfaceType"):
                listener.exitInterfaceType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInterfaceType"):
                return visitor.visitInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def interfaceType(self):

        localctx = GoLangParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_interfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(GoLangParser.INTERFACE)
            self.state = 685
            self.match(GoLangParser.L_CURLY)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GoLangParser.IDENTIFIER:
                self.state = 686
                self.methodSpec()
                self.state = 687
                self.eos()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 694
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SliceTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementType(self):
            return self.getTypedRuleContext(GoLangParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_sliceType

        def enterRule(self, listener):
            if hasattr(listener, "enterSliceType"):
                listener.enterSliceType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSliceType"):
                listener.exitSliceType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSliceType"):
                return visitor.visitSliceType(self)
            else:
                return visitor.visitChildren(self)




    def sliceType(self):

        localctx = GoLangParser.SliceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_sliceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(GoLangParser.L_BRACKET)
            self.state = 697
            self.match(GoLangParser.R_BRACKET)
            self.state = 698
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MapTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.MapTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def elementType(self):
            return self.getTypedRuleContext(GoLangParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_mapType

        def enterRule(self, listener):
            if hasattr(listener, "enterMapType"):
                listener.enterMapType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMapType"):
                listener.exitMapType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMapType"):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = GoLangParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(GoLangParser.MAP)
            self.state = 701
            self.match(GoLangParser.L_BRACKET)
            self.state = 702
            self.type_()
            self.state = 703
            self.match(GoLangParser.R_BRACKET)
            self.state = 704
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChannelTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ChannelTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementType(self):
            return self.getTypedRuleContext(GoLangParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_channelType

        def enterRule(self, listener):
            if hasattr(listener, "enterChannelType"):
                listener.enterChannelType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChannelType"):
                listener.exitChannelType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitChannelType"):
                return visitor.visitChannelType(self)
            else:
                return visitor.visitChildren(self)




    def channelType(self):

        localctx = GoLangParser.ChannelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_channelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 706
                self.match(GoLangParser.CHAN)
                pass

            elif la_ == 2:
                self.state = 707
                self.match(GoLangParser.CHAN)
                self.state = 708
                self.match(GoLangParser.RECEIVE)
                pass

            elif la_ == 3:
                self.state = 709
                self.match(GoLangParser.RECEIVE)
                self.state = 710
                self.match(GoLangParser.CHAN)
                pass


            self.state = 713
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.MethodSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoLangParser.TypeNameContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def parameters(self):
            return self.getTypedRuleContext(GoLangParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoLangParser.ResultContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_methodSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterMethodSpec"):
                listener.enterMethodSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethodSpec"):
                listener.exitMethodSpec(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMethodSpec"):
                return visitor.visitMethodSpec(self)
            else:
                return visitor.visitChildren(self)




    def methodSpec(self):

        localctx = GoLangParser.MethodSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_methodSpec)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.typeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.match(GoLangParser.IDENTIFIER)
                self.state = 717
                self.parameters()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.match(GoLangParser.IDENTIFIER)
                self.state = 719
                self.parameters()
                self.state = 720
                self.result()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.FunctionTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signature(self):
            return self.getTypedRuleContext(GoLangParser.SignatureContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_functionType

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionType"):
                listener.enterFunctionType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionType"):
                listener.exitFunctionType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFunctionType"):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = GoLangParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(GoLangParser.FUNC)
            self.state = 725
            self.signature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignatureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.SignatureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoLangParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoLangParser.ResultContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_signature

        def enterRule(self, listener):
            if hasattr(listener, "enterSignature"):
                listener.enterSignature(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSignature"):
                listener.exitSignature(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSignature"):
                return visitor.visitSignature(self)
            else:
                return visitor.visitChildren(self)




    def signature(self):

        localctx = GoLangParser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_signature)
        try:
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.parameters()
                self.state = 728
                self.result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.parameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ResultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoLangParser.ParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_result

        def enterRule(self, listener):
            if hasattr(listener, "enterResult"):
                listener.enterResult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult"):
                listener.exitResult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitResult"):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)




    def result(self):

        localctx = GoLangParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_result)
        try:
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.parameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ParametersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameterDecl(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ParameterDeclContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.COMMA)
            else:
                return self.getToken(GoLangParser.COMMA, i)

        def getRuleIndex(self):
            return GoLangParser.RULE_parameters

        def enterRule(self, listener):
            if hasattr(listener, "enterParameters"):
                listener.enterParameters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParameters"):
                listener.exitParameters(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = GoLangParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(GoLangParser.L_PAREN)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.ELLIPSIS) | (1 << GoLangParser.STAR) | (1 << GoLangParser.RECEIVE))) != 0):
                self.state = 738
                self.parameterDecl()
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 739
                        self.match(GoLangParser.COMMA)
                        self.state = 740
                        self.parameterDecl() 
                    self.state = 745
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GoLangParser.COMMA:
                    self.state = 746
                    self.match(GoLangParser.COMMA)




            self.state = 751
            self.match(GoLangParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ParameterDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_parameterDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterParameterDecl"):
                listener.enterParameterDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParameterDecl"):
                listener.exitParameterDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParameterDecl"):
                return visitor.visitParameterDecl(self)
            else:
                return visitor.visitChildren(self)




    def parameterDecl(self):

        localctx = GoLangParser.ParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameterDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 753
                self.identifierList()


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.ELLIPSIS:
                self.state = 756
                self.match(GoLangParser.ELLIPSIS)


            self.state = 759
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoLangParser.PrimaryExprContext,0)


        def unaryExpr(self):
            return self.getTypedRuleContext(GoLangParser.UnaryExprContext,0)


        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoLangParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 762
                self.primaryExpr(0)
                pass

            elif la_ == 2:
                self.state = 763
                self.unaryExpr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 781
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        localctx = GoLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 766
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 767
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.DIV) | (1 << GoLangParser.MOD) | (1 << GoLangParser.LSHIFT) | (1 << GoLangParser.RSHIFT) | (1 << GoLangParser.BIT_CLEAR) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 768
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = GoLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 769
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 770
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.OR) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 771
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = GoLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 772
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 773
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.EQUALS) | (1 << GoLangParser.NOT_EQUALS) | (1 << GoLangParser.LESS) | (1 << GoLangParser.LESS_OR_EQUALS) | (1 << GoLangParser.GREATER) | (1 << GoLangParser.GREATER_OR_EQUALS))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 774
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = GoLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 775
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 776
                        self.match(GoLangParser.LOGICAL_AND)
                        self.state = 777
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = GoLangParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 778
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 779
                        self.match(GoLangParser.LOGICAL_OR)
                        self.state = 780
                        self.expression(2)
                        pass

             
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.PrimaryExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(GoLangParser.OperandContext,0)


        def conversion(self):
            return self.getTypedRuleContext(GoLangParser.ConversionContext,0)


        def primaryExpr(self):
            return self.getTypedRuleContext(GoLangParser.PrimaryExprContext,0)


        def DOT(self):
            return self.getToken(GoLangParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def index(self):
            return self.getTypedRuleContext(GoLangParser.IndexContext,0)


        def goslice(self):
            return self.getTypedRuleContext(GoLangParser.GosliceContext,0)


        def typeAssertion(self):
            return self.getTypedRuleContext(GoLangParser.TypeAssertionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_primaryExpr

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimaryExpr"):
                listener.enterPrimaryExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimaryExpr"):
                listener.exitPrimaryExpr(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPrimaryExpr"):
                return visitor.visitPrimaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoLangParser.PrimaryExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_primaryExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 787
                self.operand()
                pass

            elif la_ == 2:
                self.state = 788
                self.conversion()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GoLangParser.PrimaryExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpr)
                    self.state = 791
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 797
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 792
                        self.match(GoLangParser.DOT)
                        self.state = 793
                        self.match(GoLangParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 794
                        self.index()
                        pass

                    elif la_ == 3:
                        self.state = 795
                        self.goslice()
                        pass

                    elif la_ == 4:
                        self.state = 796
                        self.typeAssertion()
                        pass

             
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.UnaryExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoLangParser.PrimaryExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_unaryExpr

        def enterRule(self, listener):
            if hasattr(listener, "enterUnaryExpr"):
                listener.enterUnaryExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnaryExpr"):
                listener.exitUnaryExpr(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnaryExpr"):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpr(self):

        localctx = GoLangParser.UnaryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_unaryExpr)
        self._la = 0 # Token type
        try:
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.primaryExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 806
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConversionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ConversionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_conversion

        def enterRule(self, listener):
            if hasattr(listener, "enterConversion"):
                listener.enterConversion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConversion"):
                listener.exitConversion(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConversion"):
                return visitor.visitConversion(self)
            else:
                return visitor.visitChildren(self)




    def conversion(self):

        localctx = GoLangParser.ConversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.type_()
            self.state = 810
            self.match(GoLangParser.L_PAREN)
            self.state = 811
            self.expression(0)
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.COMMA:
                self.state = 812
                self.match(GoLangParser.COMMA)


            self.state = 815
            self.match(GoLangParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.OperandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(GoLangParser.LiteralContext,0)


        def operandName(self):
            return self.getTypedRuleContext(GoLangParser.OperandNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_operand

        def enterRule(self, listener):
            if hasattr(listener, "enterOperand"):
                listener.enterOperand(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperand"):
                listener.exitOperand(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOperand"):
                return visitor.visitOperand(self)
            else:
                return visitor.visitChildren(self)




    def operand(self):

        localctx = GoLangParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_operand)
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.operandName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 819
                self.match(GoLangParser.L_PAREN)
                self.state = 820
                self.expression(0)
                self.state = 821
                self.match(GoLangParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.LiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def basicLit(self):
            return self.getTypedRuleContext(GoLangParser.BasicLitContext,0)


        def compositeLit(self):
            return self.getTypedRuleContext(GoLangParser.CompositeLitContext,0)


        def functionLit(self):
            return self.getTypedRuleContext(GoLangParser.FunctionLitContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = GoLangParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_literal)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.NIL_LIT, GoLangParser.DECIMAL_LIT, GoLangParser.OCTAL_LIT, GoLangParser.HEX_LIT, GoLangParser.FLOAT_LIT, GoLangParser.IMAGINARY_LIT, GoLangParser.RUNE_LIT, GoLangParser.RAW_STRING_LIT, GoLangParser.INTERPRETED_STRING_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.basicLit()
                pass
            elif token in [GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.IDENTIFIER, GoLangParser.L_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.compositeLit()
                pass
            elif token in [GoLangParser.FUNC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.functionLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasicLitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.BasicLitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NIL_LIT(self):
            return self.getToken(GoLangParser.NIL_LIT, 0)

        def integer(self):
            return self.getTypedRuleContext(GoLangParser.IntegerContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoLangParser.String_Context,0)


        def FLOAT_LIT(self):
            return self.getToken(GoLangParser.FLOAT_LIT, 0)

        def IMAGINARY_LIT(self):
            return self.getToken(GoLangParser.IMAGINARY_LIT, 0)

        def RUNE_LIT(self):
            return self.getToken(GoLangParser.RUNE_LIT, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_basicLit

        def enterRule(self, listener):
            if hasattr(listener, "enterBasicLit"):
                listener.enterBasicLit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBasicLit"):
                listener.exitBasicLit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBasicLit"):
                return visitor.visitBasicLit(self)
            else:
                return visitor.visitChildren(self)




    def basicLit(self):

        localctx = GoLangParser.BasicLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_basicLit)
        try:
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(GoLangParser.NIL_LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.integer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.string_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 833
                self.match(GoLangParser.FLOAT_LIT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 834
                self.match(GoLangParser.IMAGINARY_LIT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 835
                self.match(GoLangParser.RUNE_LIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.IntegerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LIT(self):
            return self.getToken(GoLangParser.DECIMAL_LIT, 0)

        def OCTAL_LIT(self):
            return self.getToken(GoLangParser.OCTAL_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(GoLangParser.HEX_LIT, 0)

        def IMAGINARY_LIT(self):
            return self.getToken(GoLangParser.IMAGINARY_LIT, 0)

        def RUNE_LIT(self):
            return self.getToken(GoLangParser.RUNE_LIT, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_integer

        def enterRule(self, listener):
            if hasattr(listener, "enterInteger"):
                listener.enterInteger(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInteger"):
                listener.exitInteger(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInteger"):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = GoLangParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperandNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.OperandNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoLangParser.QualifiedIdentContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_operandName

        def enterRule(self, listener):
            if hasattr(listener, "enterOperandName"):
                listener.enterOperandName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOperandName"):
                listener.exitOperandName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOperandName"):
                return visitor.visitOperandName(self)
            else:
                return visitor.visitChildren(self)




    def operandName(self):

        localctx = GoLangParser.OperandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_operandName)
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(GoLangParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.qualifiedIdent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.QualifiedIdentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.IDENTIFIER)
            else:
                return self.getToken(GoLangParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return GoLangParser.RULE_qualifiedIdent

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedIdent"):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedIdent"):
                listener.exitQualifiedIdent(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedIdent"):
                return visitor.visitQualifiedIdent(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdent(self):

        localctx = GoLangParser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_qualifiedIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(GoLangParser.IDENTIFIER)
            self.state = 845
            self.match(GoLangParser.DOT)
            self.state = 846
            self.match(GoLangParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositeLitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.CompositeLitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literalType(self):
            return self.getTypedRuleContext(GoLangParser.LiteralTypeContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoLangParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_compositeLit

        def enterRule(self, listener):
            if hasattr(listener, "enterCompositeLit"):
                listener.enterCompositeLit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompositeLit"):
                listener.exitCompositeLit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompositeLit"):
                return visitor.visitCompositeLit(self)
            else:
                return visitor.visitChildren(self)




    def compositeLit(self):

        localctx = GoLangParser.CompositeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_compositeLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.literalType()
            self.state = 849
            self.literalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.LiteralTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def structType(self):
            return self.getTypedRuleContext(GoLangParser.StructTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(GoLangParser.ArrayTypeContext,0)


        def elementType(self):
            return self.getTypedRuleContext(GoLangParser.ElementTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoLangParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoLangParser.MapTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(GoLangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_literalType

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteralType"):
                listener.enterLiteralType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteralType"):
                listener.exitLiteralType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLiteralType"):
                return visitor.visitLiteralType(self)
            else:
                return visitor.visitChildren(self)




    def literalType(self):

        localctx = GoLangParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_literalType)
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.structType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.arrayType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.match(GoLangParser.L_BRACKET)
                self.state = 854
                self.match(GoLangParser.ELLIPSIS)
                self.state = 855
                self.match(GoLangParser.R_BRACKET)
                self.state = 856
                self.elementType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 857
                self.sliceType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 858
                self.mapType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 859
                self.typeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.LiteralValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def elementList(self):
            return self.getTypedRuleContext(GoLangParser.ElementListContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_literalValue

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteralValue"):
                listener.enterLiteralValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteralValue"):
                listener.exitLiteralValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLiteralValue"):
                return visitor.visitLiteralValue(self)
            else:
                return visitor.visitChildren(self)




    def literalValue(self):

        localctx = GoLangParser.LiteralValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_literalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.match(GoLangParser.L_CURLY)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_CURLY) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 863
                self.elementList()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GoLangParser.COMMA:
                    self.state = 864
                    self.match(GoLangParser.COMMA)




            self.state = 869
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ElementListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def keyedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.KeyedElementContext)
            else:
                return self.getTypedRuleContext(GoLangParser.KeyedElementContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_elementList

        def enterRule(self, listener):
            if hasattr(listener, "enterElementList"):
                listener.enterElementList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElementList"):
                listener.exitElementList(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitElementList"):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)




    def elementList(self):

        localctx = GoLangParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.keyedElement()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 872
                    self.match(GoLangParser.COMMA)
                    self.state = 873
                    self.keyedElement() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.KeyedElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def element(self):
            return self.getTypedRuleContext(GoLangParser.ElementContext,0)


        def key(self):
            return self.getTypedRuleContext(GoLangParser.KeyContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_keyedElement

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyedElement"):
                listener.enterKeyedElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyedElement"):
                listener.exitKeyedElement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitKeyedElement"):
                return visitor.visitKeyedElement(self)
            else:
                return visitor.visitChildren(self)




    def keyedElement(self):

        localctx = GoLangParser.KeyedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_keyedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 879
                self.key()
                self.state = 880
                self.match(GoLangParser.COLON)


            self.state = 884
            self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.KeyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoLangParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_key

        def enterRule(self, listener):
            if hasattr(listener, "enterKey"):
                listener.enterKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKey"):
                listener.exitKey(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitKey"):
                return visitor.visitKey(self)
            else:
                return visitor.visitChildren(self)




    def key(self):

        localctx = GoLangParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_key)
        try:
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.match(GoLangParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.literalValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoLangParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_element

        def enterRule(self, listener):
            if hasattr(listener, "enterElement"):
                listener.enterElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElement"):
                listener.exitElement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitElement"):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = GoLangParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_element)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.FUNC, GoLangParser.INTERFACE, GoLangParser.MAP, GoLangParser.STRUCT, GoLangParser.CHAN, GoLangParser.NIL_LIT, GoLangParser.IDENTIFIER, GoLangParser.L_PAREN, GoLangParser.L_BRACKET, GoLangParser.EXCLAMATION, GoLangParser.PLUS, GoLangParser.MINUS, GoLangParser.CARET, GoLangParser.STAR, GoLangParser.AMPERSAND, GoLangParser.RECEIVE, GoLangParser.DECIMAL_LIT, GoLangParser.OCTAL_LIT, GoLangParser.HEX_LIT, GoLangParser.FLOAT_LIT, GoLangParser.IMAGINARY_LIT, GoLangParser.RUNE_LIT, GoLangParser.RAW_STRING_LIT, GoLangParser.INTERPRETED_STRING_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.expression(0)
                pass
            elif token in [GoLangParser.L_CURLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.literalValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.StructTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fieldDecl(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.FieldDeclContext)
            else:
                return self.getTypedRuleContext(GoLangParser.FieldDeclContext,i)


        def eos(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.EosContext)
            else:
                return self.getTypedRuleContext(GoLangParser.EosContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_structType

        def enterRule(self, listener):
            if hasattr(listener, "enterStructType"):
                listener.enterStructType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStructType"):
                listener.exitStructType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStructType"):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = GoLangParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_structType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(GoLangParser.STRUCT)
            self.state = 896
            self.match(GoLangParser.L_CURLY)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 897
                    self.fieldDecl()
                    self.state = 898
                    self.eos() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 905
            self.match(GoLangParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.FieldDeclContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoLangParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def anonymousField(self):
            return self.getTypedRuleContext(GoLangParser.AnonymousFieldContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoLangParser.String_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_fieldDecl

        def enterRule(self, listener):
            if hasattr(listener, "enterFieldDecl"):
                listener.enterFieldDecl(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFieldDecl"):
                listener.exitFieldDecl(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFieldDecl"):
                return visitor.visitFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def fieldDecl(self):

        localctx = GoLangParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_fieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 907
                if not noTerminatorBetween(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "noTerminatorBetween(2)")
                self.state = 908
                self.identifierList()
                self.state = 909
                self.type_()
                pass

            elif la_ == 2:
                self.state = 911
                self.anonymousField()
                pass


            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 914
                self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.String_Context, self).__init__(parent, invokingState)
            self.parser = parser

        def RAW_STRING_LIT(self):
            return self.getToken(GoLangParser.RAW_STRING_LIT, 0)

        def INTERPRETED_STRING_LIT(self):
            return self.getToken(GoLangParser.INTERPRETED_STRING_LIT, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_string_

        def enterRule(self, listener):
            if hasattr(listener, "enterString_"):
                listener.enterString_(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitString_"):
                listener.exitString_(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitString_"):
                return visitor.visitString_(self)
            else:
                return visitor.visitChildren(self)




    def string_(self):

        localctx = GoLangParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_string_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(_la==GoLangParser.RAW_STRING_LIT or _la==GoLangParser.INTERPRETED_STRING_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousFieldContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.AnonymousFieldContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoLangParser.TypeNameContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_anonymousField

        def enterRule(self, listener):
            if hasattr(listener, "enterAnonymousField"):
                listener.enterAnonymousField(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnonymousField"):
                listener.exitAnonymousField(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAnonymousField"):
                return visitor.visitAnonymousField(self)
            else:
                return visitor.visitChildren(self)




    def anonymousField(self):

        localctx = GoLangParser.AnonymousFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_anonymousField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GoLangParser.STAR:
                self.state = 919
                self.match(GoLangParser.STAR)


            self.state = 922
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionLitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.FunctionLitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signature(self):
            return self.getTypedRuleContext(GoLangParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoLangParser.BlockContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_functionLit

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionLit"):
                listener.enterFunctionLit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionLit"):
                listener.exitFunctionLit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFunctionLit"):
                return visitor.visitFunctionLit(self)
            else:
                return visitor.visitChildren(self)




    def functionLit(self):

        localctx = GoLangParser.FunctionLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(GoLangParser.FUNC)
            self.state = 925
            self.signature()
            self.state = 926
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.IndexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_index

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex"):
                listener.enterIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex"):
                listener.exitIndex(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndex"):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = GoLangParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(GoLangParser.L_BRACKET)
            self.state = 929
            self.expression(0)
            self.state = 930
            self.match(GoLangParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GosliceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.GosliceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoLangParser.RULE_goslice

        def enterRule(self, listener):
            if hasattr(listener, "enterGoslice"):
                listener.enterGoslice(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoslice"):
                listener.exitGoslice(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoslice"):
                return visitor.visitGoslice(self)
            else:
                return visitor.visitChildren(self)




    def goslice(self):

        localctx = GoLangParser.GosliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_goslice)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(GoLangParser.L_BRACKET)
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                    self.state = 933
                    self.expression(0)


                self.state = 936
                self.match(GoLangParser.COLON)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                    self.state = 937
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                    self.state = 940
                    self.expression(0)


                self.state = 943
                self.match(GoLangParser.COLON)
                self.state = 944
                self.expression(0)
                self.state = 945
                self.match(GoLangParser.COLON)
                self.state = 946
                self.expression(0)
                pass


            self.state = 950
            self.match(GoLangParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeAssertionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.TypeAssertionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_typeAssertion

        def enterRule(self, listener):
            if hasattr(listener, "enterTypeAssertion"):
                listener.enterTypeAssertion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTypeAssertion"):
                listener.exitTypeAssertion(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTypeAssertion"):
                return visitor.visitTypeAssertion(self)
            else:
                return visitor.visitChildren(self)




    def typeAssertion(self):

        localctx = GoLangParser.TypeAssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeAssertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(GoLangParser.DOT)
            self.state = 953
            self.match(GoLangParser.L_PAREN)
            self.state = 954
            self.type_()
            self.state = 955
            self.match(GoLangParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ArgumentsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(GoLangParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoLangParser.Type_Context,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_arguments

        def enterRule(self, listener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = GoLangParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(GoLangParser.L_PAREN)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GoLangParser.FUNC) | (1 << GoLangParser.INTERFACE) | (1 << GoLangParser.MAP) | (1 << GoLangParser.STRUCT) | (1 << GoLangParser.CHAN) | (1 << GoLangParser.NIL_LIT) | (1 << GoLangParser.IDENTIFIER) | (1 << GoLangParser.L_PAREN) | (1 << GoLangParser.L_BRACKET) | (1 << GoLangParser.EXCLAMATION) | (1 << GoLangParser.PLUS) | (1 << GoLangParser.MINUS) | (1 << GoLangParser.CARET) | (1 << GoLangParser.STAR) | (1 << GoLangParser.AMPERSAND) | (1 << GoLangParser.RECEIVE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (GoLangParser.DECIMAL_LIT - 64)) | (1 << (GoLangParser.OCTAL_LIT - 64)) | (1 << (GoLangParser.HEX_LIT - 64)) | (1 << (GoLangParser.FLOAT_LIT - 64)) | (1 << (GoLangParser.IMAGINARY_LIT - 64)) | (1 << (GoLangParser.RUNE_LIT - 64)) | (1 << (GoLangParser.RAW_STRING_LIT - 64)) | (1 << (GoLangParser.INTERPRETED_STRING_LIT - 64)))) != 0):
                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 958
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 959
                    self.type_()
                    self.state = 962
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        self.state = 960
                        self.match(GoLangParser.COMMA)
                        self.state = 961
                        self.expressionList()


                    pass


                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GoLangParser.ELLIPSIS:
                    self.state = 966
                    self.match(GoLangParser.ELLIPSIS)


                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GoLangParser.COMMA:
                    self.state = 969
                    self.match(GoLangParser.COMMA)




            self.state = 974
            self.match(GoLangParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.MethodExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoLangParser.IDENTIFIER, 0)

        def receiverType(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(GoLangParser.ReceiverTypeContext)
            else:
                return self.getTypedRuleContext(GoLangParser.ReceiverTypeContext,i)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(GoLangParser.DOT)
            else:
                return self.getToken(GoLangParser.DOT, i)

        def getRuleIndex(self):
            return GoLangParser.RULE_methodExpr

        def enterRule(self, listener):
            if hasattr(listener, "enterMethodExpr"):
                listener.enterMethodExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMethodExpr"):
                listener.exitMethodExpr(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMethodExpr"):
                return visitor.visitMethodExpr(self)
            else:
                return visitor.visitChildren(self)




    def methodExpr(self):

        localctx = GoLangParser.MethodExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_methodExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 976
                    self.receiverType()
                    self.state = 977
                    self.match(GoLangParser.DOT)

                else:
                    raise NoViableAltException(self)
                self.state = 981 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 983
            self.match(GoLangParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiverTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.ReceiverTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoLangParser.TypeNameContext,0)


        def receiverType(self):
            return self.getTypedRuleContext(GoLangParser.ReceiverTypeContext,0)


        def getRuleIndex(self):
            return GoLangParser.RULE_receiverType

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiverType"):
                listener.enterReceiverType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiverType"):
                listener.exitReceiverType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiverType"):
                return visitor.visitReceiverType(self)
            else:
                return visitor.visitChildren(self)




    def receiverType(self):

        localctx = GoLangParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_receiverType)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GoLangParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.typeName()
                pass
            elif token in [GoLangParser.L_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.match(GoLangParser.L_PAREN)
                self.state = 990
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GoLangParser.STAR]:
                    self.state = 987
                    self.match(GoLangParser.STAR)
                    self.state = 988
                    self.typeName()
                    pass
                elif token in [GoLangParser.IDENTIFIER, GoLangParser.L_PAREN]:
                    self.state = 989
                    self.receiverType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 992
                self.match(GoLangParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(GoLangParser.EosContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GoLangParser.EOF, 0)

        def getRuleIndex(self):
            return GoLangParser.RULE_eos

        def enterRule(self, listener):
            if hasattr(listener, "enterEos"):
                listener.enterEos(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEos"):
                listener.exitEos(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEos"):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = GoLangParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_eos)
        try:
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.match(GoLangParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.match(GoLangParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                if not "\n" in self._input.getText((localctx.start, self._input.LT(-1))) or "\r" in self._input.getText((localctx.start, self._input.LT(-1))):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "\"\\n\" in $text or \"\\r\" in $text")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[70] = self.expression_sempred
        self._predicates[71] = self.primaryExpr_sempred
        self._predicates[88] = self.fieldDecl_sempred
        self._predicates[98] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def primaryExpr_sempred(self, localctx, predIndex):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def fieldDecl_sempred(self, localctx, predIndex):
            if predIndex == 6:
                return noTerminatorBetween(2)
         

    def eos_sempred(self, localctx, predIndex):
            if predIndex == 7:
                return "\n" in self._input.getText((localctx.start, self._input.LT(-1))) or "\r" in self._input.getText((localctx.start, self._input.LT(-1)))
         




