Q = {1,2,3,4,5,6,7,8,9,10};

0:[
  precise float32[100000] slice;
  precise int i;
  precise int idx;
  precise float32 elem;
  precise float64 tempelem;

  approx float32 [1000000]lowarray;

  lowarray = (approx float32[]) input_array;

  repeat 10 {
    for q in Q do {
      send(q, approx float32[], lowarray);
    };
    for q in Q do {
      slice = receive(q, approx float32[]);
      i = 0;
      repeat 100000 {
        idx = (q-1)*100000+i;
        elem = slice[i];
        tempelem = (approx float64) elem;
        input_array[idx] = tempelem;
        i = i+1;
      };
    }; 
  };
]

||

q in Q:[
  approx float32[1000000] array;
  approx float32[100000] slice;
  precise int i;
  precise int j;
  precise int k;
  precise int conditional;
  precise float32 point;
  precise float32 temp;

  repeat 10 {
    array = receive(0, approx float32[]);
    i = (q-1)*10;
    k = 0;
    repeat 10 {
    conditional = (i<999) && (i>0);
      if conditional then {
        j = 1;
        repeat 998 {
          temp = array[i*1000+j-1]+array[i*1000+j+1] + array[(i-1)*1000+j] + array[(i+1)*1000+j];
          point = 0.2*temp;
          slice[k] = point;
          j = j+1;
          k = k+1;
        };
      } else {
          k = k+1000;
      };
      i = i+1;
    };
    send(0, approx float32[], slice);
  };
]