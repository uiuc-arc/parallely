precise int Num_threads;
precise int[8114000] Edges;
precise int[8114] Inlinks;
precise int[8114] Outlinks;
precise int[8114] VisitedGlobal;
precise int Num_nodes;
precise int Num_edges;
precise int NodesPerThread;
Q = {1,2,3,4,5,6,7,8};
0:[
precise int _temp;
approx int[8114] visited;
approx int tempVisited;
approx int[1200] slice;
precise int mystart;
precise int myend;
precise int i;
precise int iter;
precise int j;
precise int temp;
precise int lastthread;
precise int mysize;
visited=VisitedGlobal;
i=0;
for q in Q do {
mystart=i*NodesPerThread;
myend=(i+1)*NodesPerThread;
temp=Num_threads-1;
lastthread=(i==temp);
if lastthread then {
 myend=Num_nodes;
 };
send(q, precise int, mystart);
send(q, precise int, myend);
i=i+1;
};
iter=0;
repeat 10 {
for q in Q do {
send(q, approx int[], visited);
};
i=0;
for q in Q do {
mystart=i*NodesPerThread;
myend=(i+1)*NodesPerThread;
temp=Num_threads-1;
lastthread=(i==temp);
if lastthread then {
 myend=Num_nodes;
 };
mysize=myend-mystart;
j=0;
slice = receive(q, approx int[]);
slice=slice[0.999](-1);
j=0;
repeat 10 {
tempVisited=slice[j];
temp=mystart+j;
visited[temp]=tempVisited;
j=j+1;

j=j+1;
};
i=i+1;
};

iter=iter+1;
};
VisitedGlobal=visited;
]
||
q in Q:[
precise int _temp;
precise int q;
precise int[8114000] edges;
precise int[8114] inlinks;
precise int[8114] outlinks;
approx float64[8114] visited;
precise int inlink;
precise int neighbor;
approx int current;
approx float64[1200] newVisited;
precise int nodeInlinks;
precise int i;
precise int mystart;
precise int myend;
precise int cur;
precise int temp;
approx int atemp;
approx int temp0;
precise int mysize;
precise int iter;
edges=Edges;
inlinks=Inlinks;
outlinks=Outlinks;
mystart = receive(0, precise int);
myend = receive(0, precise int);
iter=0;
repeat 10 {
visited = receive(0, approx float64[]);
mysize=myend-mystart;
i=0;
repeat 10 {
cur=mystart+i;
nodeInlinks=inlinks[cur];
temp0=0;
inlink=0;
repeat 10 {
temp=cur*1000+inlink;
neighbor=edges[temp];
current=visited[neighbor];
temp0=current||temp0;
inlink=inlink+1;

inlink=inlink+1;
};
visited[i]=temp0;
i=i+1;

i=i+1;
};
send(0, approx float64[], visited);

iter=iter+1;
};
]