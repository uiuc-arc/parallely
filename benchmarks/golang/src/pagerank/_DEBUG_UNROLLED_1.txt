precise int Num_threads;
precise int[8114000] Edges;
precise int[8114] Inlinks;
precise int[8114] Outlinks;
precise float64[8114] PagerankGlobal;
precise int Num_nodes;
precise int Num_edges;
precise int NodesPerThread;
Q = {1,2,3,4,5,6,7,8};
0:[
precise int _temp;
approx float64[8114] pageranks;
approx float64 newPagerank;
approx float64[1200] slice;
precise int mystart;
precise int myend;
precise int i;
precise int iter;
precise int j;
precise int temp;
approx int atemp;
precise int lastthread;
precise int mysize;
pageranks=PagerankGlobal;
i=0;
for q in Q do {
mystart=i*NodesPerThread;
myend=(i+1)*NodesPerThread;
temp=Num_threads-1;
lastthread=(i==temp);
if lastthread then {
 myend=Num_nodes;
 };
send(q, precise int, mystart);
send(q, precise int, myend);
i=i+1;
};
iter=0;
repeat 10 {
for q in Q do {
send(q, approx float64[], pageranks);
};
i=0;
for q in Q do {
mystart=i*NodesPerThread;
myend=(i+1)*NodesPerThread;
temp=Num_threads-1;
lastthread=(i==temp);
if lastthread then {
 myend=Num_nodes;
 };
mysize=myend-mystart;
j=0;
atemp, slice = condreceive(q, approx float64[]);
j=0;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;
  <dummy 0>;

i=i+1;
};

iter=iter+1;
};
PagerankGlobal=pageranks;
]
||
q in Q:[
precise int _temp;
precise int q;
precise int[8114000] edges;
precise int[8114] inlinks;
precise int[8114] outlinks;
approx float64[8114] pageranks;
precise int inlink;
precise int neighbor;
precise int outN;
precise float64 outNf;
approx float64 current;
approx float64[1200] newPagerank;
precise int nodeInlinks;
precise int i;
precise int mystart;
precise int myend;
precise int cur;
precise int temp;
approx int atemp;
approx float64 temp0;
approx float64 temp1;
approx float64 temp2;
precise int mysize;
precise int iter;
edges=Edges;
inlinks=Inlinks;
outlinks=Outlinks;
mystart = receive(0, precise int);
myend = receive(0, precise int);
iter=0;
repeat 10 {
pageranks = receive(0, approx float64[]);
mysize=myend-mystart;
i=0;
repeat 10 {
cur=mystart+i;
nodeInlinks=inlinks[cur];
temp0=0.15;
inlink=0;
repeat 10 {
temp=cur*1000+inlink;
neighbor=edges[temp];
outN=outlinks[neighbor];
outNf=convertToFloat(outN);
current=pageranks[neighbor];
temp1=0.85*current;
temp2=temp1/outNf;
temp0=temp0+temp2;
inlink=inlink+1;

inlink=inlink+1;
};
newPagerank[i]=temp0;
i=i+1;

i=i+1;
};
atemp = 1 [0.99] 0;
condsend(atemp, 0, approx float64[], newPagerank);

iter=iter+1;
};
]