Q = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
precise int Num_nodes;
precise int [] Edges;
precise int [] Inlinks;
precise int [] Outlinks;
precise float64 [] Pageranks;

0:[
  precise float64[3911] newPageranks;
  precise int nodesPerThread;
  precise int mystart;
  precise int myend;
  precise int i;
  precise int j;
  precise float temp;
  precise int iterations;

  nodesPerThread = Num_nodes/16;

  for q in Q do {
    send(q, precise int[], Inlinks);
    send(q, precise int[], Outlinks);

		mystart = (q - 1)*nodesPerThread;
    myend = q * nodesPerThread;
		myend = min(myend, Num_nodes);

    send(q, precise int, mystart);
    send(q, precise int, myend);    
  };
  repeat 10 {
    for q in Q do {
      send(q, precise float64[], Pageranks);
    };
    for q in Q do {
      newPageranks = receive(q, precise float64[]);
      mystart = (q - 1) * nodesPerThread;
      myend = q * nodesPerThread;
		  myend = min(myend, Num_nodes);
      iterations = myend-mystart;
      i = mystart;
      repeat iterations {
        j = i-mystart;
        temp = newPageranks[j];
        Pageranks[i] = temp;
        i = i + 1;
      };
    };
  };
]

||

q in Q:[
  precise int [62586] inlinks;
  precise int [62586] outlinks;
  precise float64 [62586] pageranks;
  precise float64 newPagerank;
  precise int inlink;
  precise int neighbor;
  precise int outN;
  precise float64 current;
  precise float64 outNFloat;
  
  precise int mystart;
  precise int myend;
  precise int iterations;
  precise float64 [3911] mypageranks;
  precise int i;
  precise int j;
  precise int temp_index;

  inlinks = receive(0, precise int[]);
  outlinks = receive(0, precise int[]);

  mystart = receive(0, precise int);
  myend = receive(0, precise int);
  iterations = myend-mystart;

  repeat 10 {
    pageranks = receive(0, precise float64[]);

    i = mystart;
    repeat iterations {    
      newPagerank = 0.15;
      inlink = inlinks[i];
      j = 0;
      repeat inlink {
        temp_index = (q - 1) * 1000 + j;
        neighbor = Edges[temp_index];
        outN = outlinks[neighbor];
        outNFloat = convertToFloat(outN);
        current = pageranks[neighbor];
        newPagerank = newPagerank + 0.85 * current / outNFloat;
        j = j + 1;
      };
      mypageranks[i-mystart] = newPagerank;
      i = i + 1;
    };
    
    send(0, precise float64[], mypageranks);
  };
]