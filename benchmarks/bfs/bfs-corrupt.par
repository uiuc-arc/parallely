Q = {1,2,3,4,5,6,7,8,9,10};

0:[
  precise int32 [100 100] edges;
  precise int32 [100] inlinks;
  precise int32 [100] outlinks;
  approx  int32 [100] visited;
  approx  int32 [10] slice;
  precise int32 idx;
  precise int32 i;
  approx  int32 vis;

  for q in Q do {
    send(q, precise int32[], edges);
    send(q, precise int32[], inlinks);
    send(q, precise int32[], outlinks);
  }

  repeat 10 {
    for q in Q do {
      send(q, approx int32[], visited);
    }
    for q in Q do {
      slice = receive(q, approx int32[]);
      i = 0;
      idx = (q-1)*10;
      repeat 10 {
        vis = slice[i];
        visited[idx] = vis;
        i = i+1;
        idx = idx+1;
      }
    }
  }
]

||

q in Q:[
  precise int32 [100 100] edges;
  precise int32 [100] inlinks;
  precise int32 [100] outlinks;
  approx  int32 [100] visited;
  approx  int32 [10] slice;
  precise int32 node;
  precise int32 neighbors;
  precise int32 neighbor;
  precise int32 neighborCtr;
  precise int32 idx;
  approx  int32 vis;
  approx  int32 condition;

  edges = receive(0, precise int32[]);
  inlinks = receive(0, precise int32[]);
  outlinks = receive(0, precise int32[]);

  repeat 10 {
    visited = receive(0, approx int32[]);
    node = (q-1)*10;
    repeat 10 {
      neighbors = inlinks[node];
      neighborCtr = 0;
      idx = 0;
      vis = visited[node];
      repeat neighbors {
        neighbor = edges[node neighborCtr];
        condition = (visited[neighbor]>0);
        vis = 1 [condition] vis;
        neighborCtr = neighborCtr+1;
      }
      vis = vis [0.99] (randInt32())
      slice[idx] = vis;
      idx = idx+1;
      node = node+1;
    }
    send(0, approx int32[], slice);
  }
]

