Q = {1,2};

0:[
  precise int32 [10000] edges;
  precise int32 [100] inlinks;
  precise int32 [100] outlinks;
  precise int32 [100] visited;
  precise int32 [10] slice;
  precise int32 idx;
  precise int32 i;
  precise int32 vis;
  precise int32 q;

  for q in Q do {
    send(q, precise int32[], edges);
    send(q, precise int32[], inlinks);
    send(q, precise int32[], outlinks)
  };

  repeat 2 {
    for q in Q do {
      send(q, precise int32[], visited)
    };
    for q in Q do {
      slice = receive(q, precise int32[]);
      i = 0;
      idx = q*10;
      repeat q {
        vis = slice[i];
        visited[idx] = vis;
        i = i+1;
        idx = idx+1
      }
    }
  }
]

||

q in Q:[
  precise int32 [10000] edges;
  precise int32 [100] inlinks;
  precise int32 [100] outlinks;
  precise int32 [100] visited;
  precise int32 [10] slice;
  precise int32 node;
  precise int32 neighbors;
  precise int32 neighbor;
  precise int32 neighborCtr;
  precise int32 idx;
  precise int32 vis;
  precise int32 condition;
  precise int32 q;
  precise int32 temp;

  edges = receive(0, precise int32[]);
  inlinks = receive(0, precise int32[]);
  outlinks = receive(0, precise int32[]);

  repeat 2 {
    visited = receive(0, precise int32[]);
    node = q*10;
    repeat idx {
      neighbors = inlinks[node];
      neighborCtr = 0;
      idx = 0;
      vis = visited[node];
      repeat neighbors {
      temp = edges[node];
        neighbor = temp;
        temp = visited[neighbor];
        condition = temp>0;
        if condition then {
          vis = 1
        } else { skip };
        neighborCtr = neighborCtr+1
      };
      slice[idx] = vis;
      idx = idx+1;
      node = node+1
    };
    send(0, precise int32[], slice);
  }
]

