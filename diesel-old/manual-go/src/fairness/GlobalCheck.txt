Fairness: (same benchmark in both Aws and Armando's paper)
------------------------------------------------------------
Master{

	float delta = 0.99 //can be whatever threshold we want (but it will necessarily be tighter on each processor)
	float epsilon = 0 //doesn't matter what we initialize this too since it will be overwritten

	dynamic float MaleHireProb = 0 //doesn't matter what we initialize this too since it will be overwritten
        track(MaleHireProb,0,0)

	dynamic float FemaleHireProb = 0 //doesn't matter what we initialize this too since it will be overwritten
	track(FemaleHireProb,0,0)

	dynamic float Ratio = 0 //doesn't matter what we initialize this too since it will be overwritten
	track(Ratio,0,0)


	float [3][10000] PeopleArray = [[1,23,5],[0,2,4],.....]
	int i =0
	for x : [PID1...PID10]{
		send(PeopleArray[1:3][i*1000:i*1000+1000],x)
		i += 1
	}

	int males = 0
	int females = 0
	int HiredMales = 0
	int HiredFemales = 0
	

	for x : [PID1...PID10]{
		results = receive(x)
		males += results[0]
		females += results[2]
		HiredMales += results[1]
		HiredFemales += results[3]		
	}


	  //manually calculating the epsilon and then manually setting it to be the dynamically tracked var's 
	  eps_m = f(Females,delta/2)
	  eps_f = f(Females,delta/2)

	  MaleHireProbs = track(HiredMales/males,eps_m,delta/2)		//manually setting the dynamically tracked var to have right epsilon
	  FemaleHiredProbs = track(HiredFemales/females,eps_f,delta/2)

	  //since ratio is an arithmetic combination of two dynamically tracked vars
	  //it will have it's own dynamically tracked eps and delta
	  Ratio = MaleHireProbs/FemaleHireProbs

	  // Ratio.value - Ratio.epsilon > 0.8  <==> Ratio.epsilon < Ratio.value - 0.8
	  dyn_check(Ratio,Ratio-0.8,delta); //here we check globally on the master
}

Worker{
	PeopleArray = receive()
	int Males = 0
	int Females = 0



	//a person is a 3tuple consisting of (gender,college_rank,years_exp)...we can have arrays of arrays as valid types right?
	for person in PeopleArray:

	    int Decision = HiringFunc(person)

	    if isMale(person){
		Males += 1
		HiredMales += Decision

	    }
	    else {
		Females += 1
		HiredFemales += Decision

            }

	   //we do no tracking on each worker, we simply send the counts to the master (who does all the dynamic tracking)
	   int [4] results = [Males,HiredMales,Females,HiredFemales]
	   send(results,Master)


}

