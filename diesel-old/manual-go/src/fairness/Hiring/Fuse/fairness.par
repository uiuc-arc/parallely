/*
 Specification is:
 E[Hire|Male]/E[Hire|Female] > 0.8
*/

 
Q = {1,2,3,4,5,6,7,8,9,10}; //processes

0:[

precise int i = 0;
precise int j =0;
precise int [10000] genders;
precise float [10000] college_ranks;
precise float [10000] years_exp
precise float delta = 0.01;

dynamic float MaleHireProb
dynamic float [] MaleHireProbs

dynamic float FemaleHireProb
dynamic float [] FemaleHireProbs
dynamic float ratio;



for q in Q do {

  j = 0;
  //send the specific chunk of data one by one
  repeat 10000 {
	send(q,precise int,genders[i*10000+j]);
   	send(q,precise float,college_rank[i*10000+j]);
   	send(q,precise float,years_exp[i*10000+j]);
	j = j + 1;
   }
   i = i + 1;
}

i = 0
for q in Q do {
   MaleHireProbs[i] = recieve(q,dynamic float);
   FemaleHireProbs[i] = recieve(q,dynamic float);

}


MaleHireProb = fuse(MaleHireProbs);
FemaleHireProb = fuse(FemaleHireProbs);

Ratio = MaleHireProb / FemaleHireProb
check(ratio,ratio.value-0.8, delta)

]

||

q in Q:[

	precise int [100000/10] genders;
	precise float [100000/10] college_ranks;
	precise float [100000/10] years_exp;
	precise int males = 0;
	precise int females = 0;
	precise int hired_males = 0;
	precise int hired_females = 0;
	precise int hired;
	precise int i = 0;
	precsie int j = 0;
	precise float delta = 0.01;
	precise float m_epsilon, f_epsilon;
	dynamic float male_hired_mean;
	dynamic float female_hired_mean;
	dynamic float ratio;

	//get my fair share of the data
	repeat 10000 {
		genders[j] = receive(0,precise Int)
		college_ranks[j] = receive(0,precise float)
		years_exp[j] = receive(0,precise float)
		j = j + 1

	}


	repeat 10000 {
		hired = f(college_ranks[i],years_exp[i]);	//this function could be expanded out
		if (gender > 0){
			males = males + 1;
			hired_males += hired
			m_epsilon = sqrt((3/5 * log(log(males+1)/log(11/10))+(5/9)*log(24/(1-delta)))/males)
	
		}
		else {
			females = females + 1;
			hired_females += hired		
			f_epsilon = sqrt((3/5 * log(log(females+1)/log(11/10))+(5/9)*log(24/(1-delta)))/females)
		}
	}



	male_hired_mean	= track(hired_males/males,delta,m_epsilon)
	female_hired_mean = track(hired_females/females,delta,f_epsilon)
	
	send(0,dynamic float, male_hired_mean)
	send(0,dynamic float, female_hired_mean)
]


dynamic float fuse(dynamic float [] arr){
	
}



