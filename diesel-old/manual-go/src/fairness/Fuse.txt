Fairness: (same benchmark in both Aws and Armando's paper)
------------------------------------------------------------
Master{
	float [3][10000] PeopleArray = [[1,23,5],[0,2,4],.....]
	int i =0
	for x : [PID1...PID10]{
		send(PeopleArray[1:3][i*1000:i*1000+1000])
		i += 1
	}

	MaleHireProbsPerProcessor [];
	FemaleHireProbsPerProcessor [];
	for x : [PID1...PID10]{
		MaleHireProbs,FemaleHireProbs = receive(x)
		MaleHireProbsPerProcessor[x] = MaleHireProbs
		FemaleHireProbsPerProcessor[x] = FemaleHireProbs
	}

	MaleHireProb = fuse(MaleHireProbsPerProcessor)
	FemaleHireProb = fuse(FemaleHireProbsPerProcessor)
	Ratio = MaleHireProb / FemaleHireProb
	dyn_check(Ratio)
}

Worker{
	PeopleArray = receive()
	int Males = 0
	int Females = 0

	float delta = 0.99 //can be whatever threshold we want (but it will necessarily be tighter on each processor)
	float epsilon = 0 //doesn't matter what we initialize this too since it will be overwritten

	dynamic float MaleHireProb = 0 //doesn't matter what we initialize this too since it will be overwritten
        track(MaleHireProb,0,0)

	dynamic float FemaleHireProb = 0 //doesn't matter what we initialize this too since it will be overwritten
	track(FemaleHireProb,0,0)

	dynamic float Ratio = 0 //doesn't matter what we initialize this too since it will be overwritten
	track(Ratio,0,0)

	//a person is a 3tuple consisting of (gender,college_rank,years_exp)...we can have arrays of arrays as valid types right?
	for person in PeopleArray:

	    int Decision = HiringFunc(person)

	    if isMale(person){
		Males += 1
		HiredMales += Decision
		MaleHireProb = (float) HiredMales / Males 

		//manually set updated epsilon after each iteration (abusing the track statement, I know...)
		eps = f(Males,delta/2)   //f(n,delta) = sqrt(1/2n * log*2/delta))
		track(MaleHireProb,eps,delta/2)	
	    }
	    else {
		Females += 1
		HiredFemales += Decision
	        FemaleHireProb = (float) HiredFemales / Females

		//manually set updated epsilon after each iteration (abusing the track statement, I know...)
		eps = f(Females,delta/2)
		track(FemaleHireProb,eps,delta/2)
            }

	send((MaleHireProbs,FemaleHireProbs),Master)
}


